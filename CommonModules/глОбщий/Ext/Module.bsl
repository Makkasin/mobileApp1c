

&НаСервере
Функция СткПолучитьСоединениеAZURE() Экспорт
	
	Стк = Новый Структура();
	Стк.Вставить("Сервер","azure1c.westeurope.cloudapp.azure.com");
	Стк.Вставить("Порт",80);
	Стк.Вставить("Логин","1с_Максим");
	Стк.Вставить("Пароль","092222");
	
	Возврат Стк;
	
КонецФункции

&НаСервере
Функция СткПолучитьСоединение(Орг=Неопределено) Экспорт
	
	Стк = Новый Структура();
	Если Орг=Неопределено Тогда
		Если  глДоступ.ПолучитьОтправкаНаВнешнийАдрес() Тогда
			Стк.Вставить("Сервер","178.208.254.21");   // http://178.208.254.21:48088/
			Стк.Вставить("Порт",48088);
		ИНАче
			Стк.Вставить("Сервер","192.168.40.9");
			Стк.Вставить("Порт",80);
		КонецеСЛИ;
		
	ИНаче
		
		Если глДоступ.ПолучитьОтправкаНаВнешнийАдрес() Тогда
			Стр = СокрЛП(Орг.ВнешнийАдрес);
		ИНАче
			Стр = СокрЛП(Орг.ВнутреннийАдрес);
		КонецЕслИ;
		
		Стр = СтрЗаменить(Стр,":",Символы.ПС);
		Стк.Вставить("Сервер",СокрЛП(СтрПолучитьСтроку(Стр,1)));
		Если СтрЧислоСтрок(Стр)=1 ТОгда
			Стк.Вставить("Порт",80);
		ИНАче
			Стк.Вставить("Порт",Число(СтрПолучитьСтроку(Стр,2)));
		КонецЕсли;
		
	КонецЕсли;
	
//	сообщить(Стк.Сервер);
	
		
	Стк.Вставить("Логин","1с_Максим");
	Стк.Вставить("Пароль","092222");
	
	Возврат Стк;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьОстаткиНаСервере(ТекСклад=Неопределено) Экспорт
	
	Если ТекСклад = Неопределено Тогда
		ТекСклад = глДоступ.ПолучитьОсновнойСклад();
	КонецЕслИ;
	текОрг = ТекСклад.Организация;
	
	Если ЗначениеЗаполнено(ТекСклад) = Ложь Тогда
		СообщитЬ("Не выбран склад!");
		Возврат;
	КонецЕСЛИ;
	
	СткСоединение = глОбщий.СткПолучитьСоединение(ТекСклад.Организация);
	
	СклИд   = СокрЛП(ТекСклад.УникальныйИдентификатор());
	дтВыгрузки = глОбщий.ПоследнийНезакратыйДень();
	Если ЗначениеЗаполнено(дтВыгрузки)=ложь ТОгда
		  дтВыгрузки = НачалоДня(ТекущаяДата());
	КонецЕСЛИ;
	
	
	
		Соединение = Новый HTTPСоединение(
        СткСоединение.Сервер, // сервер (хост)
        СткСоединение.Порт, // порт, по умолчанию для http используется 80, для https 443
        СткСоединение.Логин, // пользователь для доступа к серверу (если он есть)
        СткСоединение.Пароль, // пароль для доступа к серверу (если он есть)
        , // здесь указывается прокси, если он есть
        , // таймаут в секундах, 0 или пусто - не устанавливать
          // защищенное соединение, если используется https
    );
	
	// Получаем текст корневой страницы через GET-запрос.
	
	
	//   Запрос = Новый HTTPЗапрос("/Urals_BUH/hs/invAPI/ost?skl="+СклКод);
	стрАПИ = "/"+текОрг.APIrest+"/hs/invAPI/OST?skl="+СклИд;
	Запрос = Новый HTTPЗапрос(стрАПИ);
	
	
	Стк = Новый Структура();
	Стк.вставить("ИдУстройства", Константы.ИдУстройства.Получить());
	Стк.вставить("ИмяУстройства",глДоступ.ПолучитьНаименованиеУстройства());
	Стк.вставить("НезакрытыйДень",дтВыгрузки);
	Запрос.УстановитьТелоИзСтроки(XMLстрока(Новый ХранилищеЗначения(Стк,Новый СжатиеДанных(5))));
	
 
    Результат = Соединение.POST(Запрос);
	
 
    //Сообщить("Нам вернули код: " + Результат.КодСостояния);
    // Что примерно означают коды результата запроса:
    // [100, 299] - хороший код возврата
    // [300, 399] - нас перенаправляют на другую страницу,
    //              причём 302 - код постоянного перенаправления
    // [400, 499] - ошибка запроса
    // [500, 599] - ошибка сервера
 
    // в теле результата запроса - текст обычной html страницы
    //Сообщить("Тело результата: " + Результат.ПолучитьТелоКакСтроку()); 
	
	Если Результат.КодСостояния <> 200 Тогда 
		Сообщить("Ошибка синхронизации: код "+Результат.КодСостояния);
		Сообщить(результат.ПолучитьТелоКакСтроку());
		Возврат ;
	КонецЕСЛИ;
	
	Мас   = XMLзначение(Тип("ХранилищеЗначения"),Результат.ПолучитьТелоКакСтроку()).Получить();
	дтИзм = Мас[0];
	остТбл   = Мас[1];

	Наб = РегистрыСведений.Остатки.СоздатьНаборЗаписей();
	
	Тбл = наб.Выгрузить();
	
	ЕстьЗабаланс = остТбл.Колонки.Найти("Забаланс")<>Неопределено;
	
	МасНеНайден = Новый Массив;
	для каждого остСтр из остТбл Цикл
		Зап = Тбл.Добавить();
		Зап.Номенклатура= Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(остСтр.GUID));
		Зап.Количество  = остСтр.конОст;
		Зап.КолНаДату  = остСтр.конОст;
		Зап.КолИнв     = остСтр.КолИнв;
		Зап.Место = остСтр.Место;
		Зап.ДатаПредОстатков = дтВыгрузки;
		Зап.Склад = ТекСклад;
		Если ЕстьЗабаланс=Истина ТОгда
			Зап.Забаланс = остСтр.Забаланс;
		Иначе
			Зап.Забаланс = Ложь;
		КонецесЛИ;
		
		
		Если СсылкаСуществует(Зап.Номенклатура,"Номенклатура")=Ложь Тогда
			МасНеНайден.Добавить(остСтр.GUID);
		КонецеСЛИ;
		
	КонецЦикла;
	
	//Тбл.Свернуть("Склад,Номенклатура,ДатаЗагрузки,Место,ШтрихКод,партия","Количество");
	Тбл.ЗаполнитьЗначения(дтИзм,"ДатаЗагрузки");
	
	Наб.Отбор.Склад.Значение = ТекСклад;
	Наб.Отбор.склад.Использование = Истина;
	Наб.Загрузить(Тбл);
	Наб.Записать();
	Сообщить("Записано "+Наб.Количество()+" строк");
	
	глОбщий.ЗаписатьРегСинхро("Остатки",дтИзм);
	
	 //подгрузим номенклатуру "Объект не найден"
	 Если  МасНеНайден.Количество()<>0 Тогда
		 
		 
		 
		стрАПИ = "/"+текОрг.APIrest+"/hs/invAPI/REFFLT";
		Запрос = Новый HTTPЗапрос(стрАПИ);
		стрХр = XMLСтрока(Новый ХранилищеЗначения(МасНеНайден,Новый СжатиеДанных(5)));
		Запрос.УстановитьТелоИзСтроки(стрХр);
		
		
		Результат = Соединение.ОтправитьДляОбработки(Запрос);
		
		Если Результат.КодСостояния <> 200 Тогда 
			Сообщить("Ошибка синхронизации: код "+Результат.КодСостояния);
			Сообщить(результат.ПолучитьТелоКакСтроку());
			Возврат ;
		КонецЕСЛИ;
		
		дтЗагрИзм=Неопределено;
		Если глВыгрузкаДанных.ПрочитатьОтветОбк(Результат.ПолучитьТелоКакСтроку(),дтЗагрИзм) <> Истина Тогда
			Сообщить("Ошибка загрузки номенклатуры!");
			Возврат;
		КонецЕСЛИ;
		
	КонецЕСЛИ;
	 
 КонецПроцедуры
 
&НаСервере
Процедура ЗагрузитьОстаткиОСНаСервере() Экспорт
	
	ТекСклад = глДоступ.ПолучитьОсновнойСклад();
	текОрг = ТекСклад.Организация;
	
	Если ЗначениеЗаполнено(ТекСклад) = Ложь Тогда
		СообщитЬ("Не выбран склад!");
		Возврат;
	КонецЕСЛИ;
	
	СткСоединение = глОбщий.СткПолучитьСоединение(ТекСклад.Организация);
	
	
		Соединение = Новый HTTPСоединение(
        СткСоединение.Сервер, // сервер (хост)
        СткСоединение.Порт, // порт, по умолчанию для http используется 80, для https 443
        СткСоединение.Логин, // пользователь для доступа к серверу (если он есть)
        СткСоединение.Пароль, // пароль для доступа к серверу (если он есть)
        , // здесь указывается прокси, если он есть
        , // таймаут в секундах, 0 или пусто - не устанавливать
          // защищенное соединение, если используется https
    );
	
	// Получаем текст корневой страницы через GET-запрос.
	
	
	//   Запрос = Новый HTTPЗапрос("/Urals_BUH/hs/invAPI/ost?skl="+СклКод);
	стрАПИ = "/"+текОрг.APIrest+"/hs/invAPI/OSTOS";
	Запрос = Новый HTTPЗапрос(стрАПИ);
	
 
    Результат = Соединение.GET(Запрос);
	
 
    //Сообщить("Нам вернули код: " + Результат.КодСостояния);
    // Что примерно означают коды результата запроса:
    // [100, 299] - хороший код возврата
    // [300, 399] - нас перенаправляют на другую страницу,
    //              причём 302 - код постоянного перенаправления
    // [400, 499] - ошибка запроса
    // [500, 599] - ошибка сервера
 
    // в теле результата запроса - текст обычной html страницы
    //Сообщить("Тело результата: " + Результат.ПолучитьТелоКакСтроку()); 
	
	Если Результат.КодСостояния <> 200 Тогда 
		Сообщить("Ошибка синхронизации: код "+Результат.КодСостояния);
		Сообщить(результат.ПолучитьТелоКакСтроку());
		Возврат ;
	КонецЕСЛИ;
	
	Мас   = XMLзначение(Тип("ХранилищеЗначения"),Результат.ПолучитьТелоКакСтроку()).Получить();
	дтИзм = Мас[0];
	остТбл   = Мас[1];

	Наб = РегистрыСведений.ОстаткиОС.СоздатьНаборЗаписей();
	наб.Загрузить(остТбл);
	
	Наб.Записать();
	Сообщить("Записано "+Наб.Количество()+" строк");
	
	глОбщий.ЗаписатьРегСинхро("ОстаткиОС",дтИзм);
	 
 КонецПроцедуры
 
&НаСервере
Процедура ЗаписатьРегСинхро(ВидСпр,ТекДт = Неопределено)  Экспорт
	
	Если ТекДт = Неопределено Тогда ТекДт = ТекущаяДата(); КонецЕСЛИ;
	
	ЗапСинх = РегистрыСведений.ДатыОбновления.СоздатьМенеджерЗаписи();
	ЗапСинх.ВидСпр = ВидСпр;
	ЗапСинх.Дт = ТекДт;
	ПОпытка
	ЗапСинх.Записать();
	исключение КонецПопытки;
	
КонецПроцедуры


&НаСервере
Функция НоменклатураАвтоПодборНаСервере(пстр,ШтрихКод,Производитель=Неопределено) Экспорт
	
	пстр = СокрЛ(пСтр);
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("пСтр",пСтр);
	
	Если Лев(пСтр,2) <> "!!" Тогда
		Запрос.Текст = "ВЫБРАТЬ top 1
		|	ШтрихКоды.Номенклатура КАК Номенклатура,
		|	ШтрихКоды.Производитель КАК Производитель
		|ИЗ
		|	РегистрСведений.ШтрихКоды КАК ШтрихКоды
		|ГДЕ
		|	ШтрихКоды.ШтрихКод = &пСтр";
		Рез = Запрос.Выполнить();
		Если Рез.Пустой()=Ложь Тогда
			ШтрихКод = пСтр;
			Выб = рез.Выбрать();
			Выб.Следующий();
			Производитель = Выб.Производитель;
			Возврат Выб.Номенклатура;
		КонецЕСЛИ;
		
	Иначе
		пСтр = Сред(пСтр,3);
		Запрос.УстановитьПараметр("пСтр",пСтр);
	КонецеслИ;
	
	Запрос.Текст = "ВЫБРАТЬ top 1
	               |	Номенклатура.ссылка КАК Номенклатура
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.код = &пСтр";
	Рез = Запрос.Выполнить();
	Если Рез.Пустой()=Ложь Тогда
		Выб = рез.Выбрать();
		Выб.Следующий();
		Возврат Выб.Номенклатура;
	КонецЕСЛИ;
	
	Возврат Неопределено;
	
	
	
КонецФункции

&НаСервере
Процедура ПечатьZPLНом(СсылкаНаОбъект) Экспорт
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект)=Ложь ТОгда Возврат; КонецеСЛИ;
	Если СсылкаНаОбъект.ЭтоГРуппа ТОгда Возврат; КонецеСЛИ;
	
	пСтр = СсылкаНаОбъект.Наименование;
	пСтр = пСтр + ", "+СокрлП(СсылкаНаОбъект.ЕдИзм);
	
	шк = "!!"+СсылкаНаОбъект.Код;//глОбщий.ПереводИзGUIDв93(7,СокрЛП(СсылкаНаОбъект.УникальныйИдентификатор()));
	
	ПечатьZPL(пСтр,ШК);	
КонецПроцедуры

&НаСервере
Процедура ПечатьZPL(пСтр,ШК) Экспорт
	
	
	Мас = Новый Массив(3);
	Мас[0] = Сред(пСтр,1,24);
	Мас[1] = Сред(пСтр,25,24);
	Мас[2] = Сред(пСтр,49,24);
	
	
	АдресПринтера = "\\"+ПараметрыСеанса.АдресПринтера+"\Zebra";
	Текст = Новый ЗаписьТекста(АдресПринтера, КодировкаТекста.UTF8);
	Шаблон = "
	|^XA
	|^LH10,15
	|^CWT,E:TT0003M_.FNT
	|^CFT,30,30
	|^CI28
	|^FT10,100^BCN,80,Y,N,N^FD"+шк+"^FS
	|^FT10,150^FH^FD"+Мас[0]+"^FS
	//|^FT0,50^FH^FD_D0_94_D0_BE _D1_81_D0_B2_D0_B8_D0_B4_D0_B0_D0_BD_D0_B8_D1_8F^FS
	|^FT10,180^FH^FD"+Мас[1]+"^FS
	|^FT10,210^FH^FD"+Мас[2]+"^FS
	|^XZ
	|	";
	
	Текст.Записать(Шаблон);
	Текст.Закрыть();
	
КонецПроцедуры


&НаСервере
Функция АдресПринтера(стрАдрес=Неопределено) Экспорт
	
	Если СтрАдрес<>Неопределено Тогда
		стрАдрес = СтрЗаменить(стрАдрес," ","");
		ПараметрыСеанса.АдресПринтера = стрАдрес;
		глДоступ.УстановитьАдресПринтера(стрАдрес);
	КонецЕСЛИ;

	Возврат ПараметрыСеанса.АдресПринтера;
	
КонецФункции

&НаСервере
Функция  ОбновитьДтСинхроНасервере() Экспорт
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДатыОбновления.ВидСпр КАК ВидСпр,
	|	ДатыОбновления.Дт КАК Дт
	|ИЗ
	|	РегистрСведений.ДатыОбновления КАК ДатыОбновления";
	ТБл = Запрос.Выполнить().Выгрузить();
	
	Стк = Новый Структура("Номенклатура,Остатки,Синхро",Дата(1,1,1),Дата(1,1,1),Дата(1,1,1));
	Для каждого Стр из Тбл Цикл
		Если СокрЛП(Стр.ВидСпр)="" Тогда продолжить; конецЕсли;
		Стк.Вставить(Стр.ВидСпр,Стр.Дт);
	КонецЦикла;
	
	Возврат Стк;
	
КонецФункции

&НаСервере
Функция  ПоследнийНезакратыйДень() Экспорт
	Возврат РегистрыСведений.СинхроДвж.ПоследнийНезакратыйДень();
КонецФункции

// Проверяет физическое наличие записи в информационной базе данных о переданном значении ссылки
//
// Параметры:
//  ЛюбаяСсылка - значение любой ссылки информационной базы данных
// 
// Возвращаемое значение:
//  Истина - ссылка физически существует;
//  Ложь   - ссылка физически не существует
//
Функция СсылкаСуществует(ЛюбаяСсылка,ИмяТаблицы) Экспорт
    
    ТекстЗапроса = "
        |ВЫБРАТЬ
        |    Ссылка
        |ИЗ
        |    Справочник.[ИмяТаблицы] Тбл
        |ГДЕ
        |    Ссылка = &Ссылка
        |";
    
    ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяТаблицы]", ИмяТаблицы);
    
    Запрос = Новый Запрос;
    Запрос.Текст = ТекстЗапроса;
    Запрос.УстановитьПараметр("Ссылка", ЛюбаяСсылка);
    
	//УстановитьПривилегированныйРежим(Истина);
    
    Возврат НЕ Запрос.Выполнить().Пустой();
    
КонецФункции