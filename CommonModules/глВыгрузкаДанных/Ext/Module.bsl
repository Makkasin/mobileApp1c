&НаСервере
Функция ЗаписатьХранилищеВСтроку(Тбл,ТекДт=Неопределено)
	
	Если ТекДт = Неопределено Тогда
		ТекДТ = ТекущаяДата();
	КонецЕСЛИ;
	
	Стк = Новый структура();
	Для а=1 по ТБл.Колонки.Количество() Цикл
		Кол = ТБл.Колонки[а-1];
		
		Если Найти(Кол.Имя,"GUID") <> 0 Тогда
			п = Кол.Имя;
			Кол.Имя = п+"1";
			ТБл.Колонки.Добавить(п,Новый ОписаниеТипов("Строка"));
			Стк.Вставить(п+"1",п);
		КонецЕСЛИ;
		
	КонеццИклА;
	
	Если Стк.Количество()<>0 Тогда
		Для каждого Стр из ТБл Цикл
			Для каждого эл из Стк Цикл
				Стр[эл.Значение] = Стр[эл.Ключ].УникальныйИдентификатор();
			Конеццикла;
		КонецЦикла;
	КонецЕсли;
	
	
	
	//Мас = Новый МАссив;
	//Мас.Добавить(ТекДТ);
	//МАс.ДОбавить(ТБл);
	
	хр = Новый ХранилищеЗначения(ТБл,Новый СжатиеДанных(5));
	Возврат XMLСтрока(хр);
	
КонецФункции
			

&НаСервере
Процедура ВыгрузитьНовыеСправочники()  экспорт
	
	ЕстьОшибки = ЛожЬ;
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |    ""Номенклатура"" ВидСпр,
	               |	Номенклатура.Ссылка КАК Ссылка,
	               |	Номенклатура.ПометкаУдаления КАК ПометкаУдаления,
	               |	"""" КАК Зн1,
	               |	"""" КАК Зн2,
	               |	Номенклатура.ДатаИзменения КАК ДатаИзменения,
	               |	Номенклатура.ДатаСинхронизации КАК ДатаСинхронизации
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.ДатаИзменения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               | и	Номенклатура.ДатаСинхронизации = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |    ""Производители"" ВидСпр,
	               |	Производители.Ссылка,
	               |	Производители.ПометкаУдаления,
	               |	"""",
	               |	"""",
	               |	Производители.ДатаИзменения,
	               |	Производители.ДатаСинхронизации
	               |ИЗ
	               |	Справочник.Производители КАК Производители
				   |ГДЕ
				   |	Производители.ДатаИзменения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				   | и	Производители.ДатаСинхронизации = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |    ""ШтрихКоды"" ВидСпр,
	               |	ШтрихКоды.Номенклатура,
	               |    Ложь ПометкаУдаления,
	               |	ШтрихКоды.ШтрихКод,
	               |	ШтрихКоды.Производитель,
	               |	ШтрихКоды.ДатаИзменения,
	               |	ШтрихКоды.ДатаСинхронизации
	               |ИЗ
	               |	РегистрСведений.ШтрихКоды КАК ШтрихКоды
				   |ГДЕ
				   |	ШтрихКоды.ДатаИзменения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				   | и	ШтрихКоды.ДатаСинхронизации = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |
	               |";
	
	     Выб = Запрос.Выполнить().Выбрать();
		 
		 
		 
		 
	СткСоединение = глОбщий.СткПолучитьСоединение();
	
		Соединение = Новый HTTPСоединение(
        СткСоединение.Сервер, // сервер (хост)
        СткСоединение.Порт, // порт, по умолчанию для http используется 80, для https 443
        СткСоединение.Логин, // пользователь для доступа к серверу (если он есть)
        СткСоединение.Пароль, // пароль для доступа к серверу (если он есть)
        , // здесь указывается прокси, если он есть
        , // таймаут в секундах, 0 или пусто - не устанавливать
          // защищенное соединение, если используется https
    );
	
		 
		 
	Пока Выб.Следующий() Цикл
		Если ВыгрузитьОбк(Выб,Соединение)=Ложь Тогда
			ЕстьОшибки = истина;
		КонецЕСЛИ;
	КонецЦиклА;
	
	Если ЕстьОшибки = ложь Тогда
		Сообщить("Данные выгружены успешно!");
	КонецЕСЛИ;
	
Конецпроцедуры

Функция ВыгрузитьОбк(Выб,Соединение,Обк = Неопределено,НадоПерезаписать=0) Экспорт
	
	ОшибокНет = Истина;
	Запрос = Новый HTTPЗапрос("/Urals_BUH/hs/invAPI/SYNC");
		
		Если Выб.ВидСпр = "ШтрихКоды" Тогда
		
			Обк = регистрыСведений.ШтрихКоды.СоздатьНаборЗаписей();
			Обк.Отбор.ШтрихКод.Значение = Выб.Зн1;
			Обк.Отбор.ШтрихКод.Использование = Истина;
			
			Зап = Обк.Добавить();
			Зап.ШтрихКод 	  = Выб.Зн1;
			Зап.Номенклатура  = Выб.ссылка;
			Зап.Производитель = Выб.Зн2;
			Зап.ДатаИзменения = Выб.ДатаИзменения;
			Зап.ДатаСинхронизации = ТекущаяДата();
			
			Запрос.УстановитьТелоИзСтроки(ПолучитьСтрПарШтрихКод(Зап,Выб.ВидСпр,НадоПерезаписать));
		ИНаче
			
			Если Обк = Неопределено Тогда
				Обк = Выб.ссылка.ПолучитьОбъект();
			КонецеСЛИ;
			Обк.ДатаСинхронизации = ТекущаяДата();
			Запрос.УстановитьТелоИзСтроки(ПолучитьСтрПар(Обк,Выб.ВидСпр,НадоПерезаписать));
		КонецеСЛИ;
		
		Результат = Соединение.ОтправитьДляОбработки(Запрос);
		Если Результат.КодСостояния <> 200 Тогда 
			Сообщить("Ошибка синхронизации: код "+Результат.КодСостояния+" "+Обк);
			п = результат.ПолучитьТелоКакСтроку();
			Сообщить(п);
		//	Обк.ИнфоВыгрузки = п;
			ОшибокНет = Ложь;
		Иначе
			ПрочитатьОтвет(Обк,Результат.ПолучитьТелоКакСтроку());
			Обк.ОбменДанными.Загрузка = Истина; 
			Обк.ЗаписатЬ();
		КонецЕСЛИ;
		
		
		
		Возврат ОшибокНет;
		
КонецФункции

&НаСервере
Функция ВыгрузитьПометкуНаУдаление(Обк) экспорт
	
	СткСоединение = глОбщий.СткПолучитьСоединение();
	
		Соединение = Новый HTTPСоединение(
        СткСоединение.Сервер, // сервер (хост)
        СткСоединение.Порт, // порт, по умолчанию для http используется 80, для https 443
        СткСоединение.Логин, // пользователь для доступа к серверу (если он есть)
        СткСоединение.Пароль, // пароль для доступа к серверу (если он есть)
        , // здесь указывается прокси, если он есть
        , // таймаут в секундах, 0 или пусто - не устанавливать
          // защищенное соединение, если используется https
    );
	
	
	Стк = Новый Структура;
	Стк.Вставить("ид",СокрЛП(Обк.ссылка.УникальныйИдентификатор()));
	Стк.Вставить("Пометка",Обк.ПометкаУдаления);
	хр = Новый ХранилищеЗначения(Стк);
	
	
	
		Запрос = Новый HTTPЗапрос("/Urals_BUH/hs/invAPI/MARKNOM");
		
		Запрос.УстановитьТелоИзСтроки(xmlСтрока(хр));
		
		Результат = Соединение.ОтправитьДляОбработки(Запрос);
		Если Результат.КодСостояния <> 200 Тогда 
			Сообщить("Ошибка пометки на удаление: код "+Результат.КодСостояния+" "+Обк.Наименование);
			Сообщить(результат.ПолучитьТелоКакСтроку());
			Возврат Ложь;
		КонецЕСЛИ;
		
		   Стк = xmlЗначение(Тип("ХранилищеЗначения"),результат.ПолучитьТелоКакСтроку()).Получить();
		   Обк.Наименование = Стк.Наименование;
		
		
		Возврат Истина;
		
	
КонецФункции

&НаСервере
Процедура ВыгрузитьЗаписиИнвентаризации(дтВыгр=Неопределено)  экспорт
	
	Запрос = новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	0 КАК ЭтоГруппа,
	                |	инвИнвентаризация.Ссылка КАК Ссылка,
	                |	инвИнвентаризация.Дата КАК Дата,
	                |	инвИнвентаризация.Склад КАК Склад,
	                |	инвИнвентаризация.Место КАК Место,
	                |	инвИнвентаризация.Номенклатура КАК Номенклатура,
	                |	инвИнвентаризация.ШтрихКод КАК ШтрихКод,
	                |	инвИнвентаризация.Количество КАК Количество,
	                |	инвИнвентаризация.ДатаИзменения КАК ДатаИзменения,
	                |	инвИнвентаризация.Лог КАК Лог,
	                |	&ИмяУстройства КАК ИмяУстройства,
	                |	&ИдУстройства  КАК ИдУстройства
	                |ИЗ
	                |	Справочник.инвИнвентаризация КАК инвИнвентаризация
	                |ГДЕ
	                |	инвИнвентаризация.ДатаСинхронизации = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
					|  и инвИнвентаризация.Дата < &Дт";
	
	Если дтВыгр = Неопределено Тогда
		Запрос.УстановитьПараметр("Дт",Дата(2050,1,1));
	ИНаче
		Запрос.УстановитьПараметр("Дт",дтВыгр);
	КонецЕсли;
	Запрос.УстановитьПараметр("ИдУстройства", Константы.ИдУстройства.Получить());
	Запрос.УстановитьПараметр("ИмяУстройства",Константы.ИмяУстройства.Получить());
	
	
	
	     Тбл = Запрос.Выполнить().Выгрузить();
		 Если Тбл.Количество()=0 Тогда Возврат; КонецЕСЛИ;
		 
		 
		 МасКол = Новый Массив;
		 СткКолИд = ПолучитьСткКолИД(Тбл,МасКол);
		 
		 
		 тбСкл = Тбл.Скопировать();
		 тбСкл.Свернуть("Склад","");
		 Для каждого стСкл из тбСкл Цикл
			 
			 
			 текОрг = стСкл.склад.Организация;
			 Если ЗначениеЗаполнено(ТекОрг)=Ложь Тогда
				 Сообщить("Ошибка определения организации по складу! "+стСкл.склад);
				 продолжить;
			 КонецеСЛИ;
			 
			 
			 
			 СткСоединение = глОбщий.СткПолучитьСоединение(текОрг);
			 стрАПИ = "/"+текОрг.APIrest+"/hs/invAPI/SYNC";
			 
			 Соединение = Новый HTTPСоединение(
			 СткСоединение.Сервер, // сервер (хост)
			 СткСоединение.Порт, // порт, по умолчанию для http используется 80, для https 443
			 СткСоединение.Логин, // пользователь для доступа к серверу (если он есть)
			 СткСоединение.Пароль, // пароль для доступа к серверу (если он есть)
			 , // здесь указывается прокси, если он есть
			 , // таймаут в секундах, 0 или пусто - не устанавливать
			 // защищенное соединение, если используется https
			 );
			 
			 масДанные = Тбл.НайтиСтроки(Новый Структура("Склад",стСкл.Склад));
			 
			 Для каждого Выб из масДанные Цикл
				 
				 Запрос = Новый HTTPЗапрос(стрАПИ);
				 Запрос.УстановитьТелоИзСтроки(ПолучитьСтрПарЗаписиИнв(Выб,МасКол,СткКолИд,"инвИнвентаризация"));
				 
				 Результат = Соединение.ОтправитьДляОбработки(Запрос);
				 Если Результат.КодСостояния <> 200 Тогда 
					 Сообщить("Ошибка синхронизации: код "+Результат.КодСостояния+" "+выб.Номенклатура);
					 Сообщить(результат.ПолучитьТелоКакСтроку());
					 продолжить;
				 КонецЕСЛИ;
				 
				 Обк = Выб.ссылка.ПолучитьОбъект();
				 Если Обк.ДатаИзменения <> Выб.ДатаИзменения Тогда Продолжить; КонецеслИ; // Пока записывали  данные поменялись
				 //ПрочитатьОтвет(Обк,Результат.ПолучитьТелоКакСтроку());
				 Обк.ДатаСинхронизации = ТекущаяДата();
				 
				 Обк.ОбменДанными.Загрузка = Истина;
				 Обк.ЗаписатЬ();
				 
			 КонецЦиклА;
			 
			 
		 КонецЦиклА;
		 
Конецпроцедуры

&НаСервере
Процедура ВыгрузитьДанныеВБазу(текОрг,Тбл,ИмяМетода)
	
			 
			 СткСоединение = глОбщий.СткПолучитьСоединение(текОрг);
			 стрАПИ = "/"+текОрг.APIrest+"/hs/invAPI/"+ИмяМетода;
			 
			 Соединение = Новый HTTPСоединение(
			 СткСоединение.Сервер, // сервер (хост)
			 СткСоединение.Порт, // порт, по умолчанию для http используется 80, для https 443
			 СткСоединение.Логин, // пользователь для доступа к серверу (если он есть)
			 СткСоединение.Пароль, // пароль для доступа к серверу (если он есть)
			 , // здесь указывается прокси, если он есть
			 , // таймаут в секундах, 0 или пусто - не устанавливать
			 // защищенное соединение, если используется https
			 );
			 
			 
			 Запрос = Новый HTTPЗапрос(стрАПИ);
			 Запрос.УстановитьТелоИзСтроки(ЗаписатьХранилищеВСтроку(Тбл));
			 
			 Результат = Соединение.ОтправитьДляОбработки(Запрос);
			 Если Результат.КодСостояния <> 200 Тогда 
				 Сообщить("Ошибка синхронизации: код "+Результат.КодСостояния);
				 Сообщить(результат.ПолучитьТелоКакСтроку());
				 Возврат;
			 КонецЕСЛИ;
			 
			 Для каждого СтрМас из Тбл Цикл
				 Обк = СтрМас.GUID1.ПолучитьОбъект();
				 //ПрочитатьОтвет(Обк,Результат.ПолучитьТелоКакСтроку());
				 Обк.ДатаСинхронизации = ТекущаяДата();
				 
				 Обк.ОбменДанными.Загрузка = Истина;
				 Обк.ЗаписатЬ();
			 Конеццикла;
			 
	
	
	
КонецПроцедуры


&НаСервере
Процедура ВыгрузитьЗапросыНаВыдачуТМЦ(ссЗвк=Неопределено) Экспорт
	
	Если ссЗвк = Неопределено ТОгда
	ЗагрузитьЗапросыНаВыдачуТМЦ();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |    ""ЗаявкиНаВыдачуТМЦ"" ВидСпр,	
	               |	Ложь КАК ЭтоГруппа,
	               |	ЗаявкиНаВыдачуТМЦ.Ссылка КАК GUID,
	               |	ЗаявкиНаВыдачуТМЦ.Код КАК Код,
	               |	ЗаявкиНаВыдачуТМЦ.Дата КАК Дата,
	               |	ЗаявкиНаВыдачуТМЦ.Склад КАК СкладGUID,
	               |	ЗаявкиНаВыдачуТМЦ.Номенклатура КАК НоменклатураGUID,
	               |	ЗаявкиНаВыдачуТМЦ.Количество КАК Количество,
	               |	ЗаявкиНаВыдачуТМЦ.Лог КАК Лог,
	               |	ЗаявкиНаВыдачуТМЦ.ДатаСинхронизации КАК ДатаСинхронизации,
	               |	ЗаявкиНаВыдачуТМЦ.ДатаИзменения КАК ДатаИзменения,
	               |	ЗаявкиНаВыдачуТМЦ.ИнфоВыгрузки КАК ИнфоВыгрузки,
	               |	ЗаявкиНаВыдачуТМЦ.ГарНомер КАК ГарНомер,
	               |	ЗаявкиНаВыдачуТМЦ.ТабНомер КАК ТабНомер,
	               |	ЗаявкиНаВыдачуТМЦ.ТСстр КАК ТСстр,
	               |	ЗаявкиНаВыдачуТМЦ.Сотрудник КАК Сотрудник,
	               |	ЗаявкиНаВыдачуТМЦ.ДокументОснование КАК ДокументОснование,
	               |	ЗаявкиНаВыдачуТМЦ.ГосНомер КАК ГосНомер,
	               |	ЗаявкиНаВыдачуТМЦ.Статус КАК Статус,
	               |	ЗаявкиНаВыдачуТМЦ.ВерсияДанных КАК ВерсияДанных,
	               |	ЗаявкиНаВыдачуТМЦ.идПланшета КАК идПланшета,
	               |	ЗаявкиНаВыдачуТМЦ.имяПланшета КАК имяПланшета
	               |ИЗ
	               |	Справочник.ЗаявкиНаВыдачуТМЦ КАК ЗаявкиНаВыдачуТМЦ
	               |ГДЕ
	               |	ЗаявкиНаВыдачуТМЦ.ДатаСинхронизации = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				   | или &Звк = ЗаявкиНаВыдачуТМЦ.ссылка 
				   |";
	      Запрос.УстановитьПараметр("Звк",ссЗвк);
	
	     ТБл = Запрос.Выполнить().Выгрузить();
		 Если Тбл.Количество()=0 Тогда Возврат; КонецЕСЛИ;
		 
		 //КОСТЫЛЬ
		 //ТекОрг = глДоступ.ПолучитьОсновнойСклад().Организация;
		 
		 тбСкл = Тбл.Скопировать();
		 тбСкл.Свернуть("СкладGUID","");
		 Для каждого стСкл из тбСкл Цикл
			 
			 текОрг = стСкл.СкладGUID.Организация;
			 Если ЗначениеЗаполнено(ТекОрг)=Ложь Тогда
			     Сообщить("Ошибка определения организации по складу! "+стСкл.СкладGUID);
			     продолжить;
			 КонецеСЛИ;
			 
			 масДанные = Тбл.НайтиСтроки(Новый Структура("СкладGUID",стСкл.СкладGUID));
			 т1 = Тбл.Скопировать(масДанные);
			 ВыгрузитьДанныеВБазу(текОрг,т1,"SYNCSPR");
		 
		 КонецЦикла;
		 
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьЗапросыНаВыдачуТМЦ(безИд=Ложь) Экспорт
	
	текСкл = глДоступ.ПолучитьОсновнойСклад();
	Если текСкл.ВыдчаТМЦчерезСогласование=Ложь Тогда
		Если глДоступ.ДоступСогласованиеВыдачиТМЦ()<>Истина ТОгда
			Возврат;
		КонецЕСЛИ;
	КонецЕСЛИ;
	
	текОрг = текСкл.Организация;
	ИмяМетода = "LOADZAPTMC";
	
	СткСоединение = глОбщий.СткПолучитьСоединение(текОрг);
	стрАПИ = "/"+текОрг.APIrest+"/hs/invAPI/"+ИмяМетода;
	
	Соединение = Новый HTTPСоединение(
	СткСоединение.Сервер, // сервер (хост)
	СткСоединение.Порт, // порт, по умолчанию для http используется 80, для https 443
	СткСоединение.Логин, // пользователь для доступа к серверу (если он есть)
	СткСоединение.Пароль, // пароль для доступа к серверу (если он есть)
	, // здесь указывается прокси, если он есть
	, // таймаут в секундах, 0 или пусто - не устанавливать
	// защищенное соединение, если используется https
	);
	
	
	Запрос = Новый HTTPЗапрос(стрАПИ);
	Если БезИд ТОгда
		хр = Новый ХранилищеЗначения(Новый Структура("идПланшета,Склад",Неопределено,Неопределено),Новый СжатиеДанных(5));
	ИНаче
		хр = Новый ХранилищеЗначения(Новый Структура("идПланшета,Склад",ИмяКомпьютера(),СокрЛП(глДоступ.ПолучитьОсновнойСклад().УникальныйИдентификатор())),Новый СжатиеДанных(5));
	КонецЕсли;
	Запрос.УстановитьТелоИзСтроки(XMLСтрока(хр));
	
	Результат = Соединение.ОтправитьДляОбработки(Запрос);
	Если Результат.КодСостояния <> 200 Тогда 
		Сообщить("Ошибка синхронизации: код "+Результат.КодСостояния);
		Сообщить(результат.ПолучитьТелоКакСтроку());
		Возврат;
	КонецЕСЛИ;
	
	
	Мас = XMLЗначение(Тип("ХранилищеЗначения"),Результат.ПолучитьТелоКакСтроку()).ПОлучить();
	ТБл = МАс[1];
	
	
	СткКол = Новый Структура();
	Для каждого Кол из Тбл.Колонки Цикл
		СткКол.Вставить(Кол.имя,"");
	Конеццикла;
	
	Для каждого Стр из Тбл Цикл
		ЗаписатьОбк(Стр,СткКол);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьДвжТМЦ(НужноЗакрытьДень=FALSE)  экспорт
	
	Запрос = новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	""двжТМЦ"" КАК ВидСпр,
	                |	ЛОЖЬ КАК ЭтоГруппа,
	                |	ВерсияДанных КАК ВД,
	                |	инвИнвентаризация.ПометкаУдаления КАК ПометкаУдаления,
	                |	инвИнвентаризация.Ссылка КАК Ссылка1,
	                |	инвИнвентаризация.Дата КАК Дата,
	                |	инвИнвентаризация.Склад КАК Склад1,
	                |	инвИнвентаризация.Место КАК Место,
	                |	инвИнвентаризация.Номенклатура КАК Номенклатура,
	                |	инвИнвентаризация.ШтрихКод КАК ШтрихКод,
	                |	инвИнвентаризация.Количество КАК Количество,
	                |	инвИнвентаризация.Лог КАК Лог,
	                |	инвИнвентаризация.ГарНомер КАК ГарНомер,
	                |	инвИнвентаризация.ТабНомер КАК ТабНомер,
	                |	инвИнвентаризация.Сотрудник КАК Сотрудник,
	                |	инвИнвентаризация.ДокументОснование КАК ДокументОснование,
	                |	инвИнвентаризация.ВесУтиль КАК ВесУтиль,
	                |	инвИнвентаризация.Агрегат КАК Агрегат1,
	                |	инвИнвентаризация.ТипРасходаМасла КАК ТипРасходаМасла,
	                |	инвИнвентаризация.ВидДвижения КАК ВидДвижения,
	                |	инвИнвентаризация.ИННДО КАК ИННДО,
	                |	&ИмяУстройства КАК ИмяУстройства,
	                |	&ИдУстройства  КАК ИдУстройства
					|
	                |ИЗ
	                |	Справочник.двжТМЦ КАК инвИнвентаризация
	                |ГДЕ
	                |	инвИнвентаризация.ДатаСинхронизации = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
	
	Запрос.УстановитьПараметр("ИдУстройства", Константы.ИдУстройства.Получить());
	Запрос.УстановитьПараметр("ИмяУстройства",Константы.ИмяУстройства.Получить());
	
	ТБл = Запрос.Выполнить().Выгрузить();
	Если Тбл.Количество()=0 и НужноЗакрытьДень=FALSE Тогда Возврат; КонецЕСЛИ;
		 
		 ДатаСинхронизации = ТекущаяДата();
		 
		 Тбл.Колонки.Добавить("GUID");
		 Тбл.Колонки.Добавить("СкладGUID");
		 Тбл.Колонки.Добавить("НоменклатураGUID");
		 Тбл.Колонки.Добавить("АгрегатGUID");
		 Для каждого Стр из Тбл Цикл
			 Стр.GUID    		  = Стр.ссылка1.УникальныйИдентификатор();
			 Стр.СкладGUID        = Стр.Склад1.УникальныйИдентификатор();
			 Стр.НоменклатураGUID = Стр.Номенклатура.УникальныйИдентификатор();
			 Стр.АгрегатGUID      = Стр.Агрегат1.УникальныйИдентификатор();
		 Конеццикла;
		 
		 Тбл.Колонки.Удалить("Номенклатура");
		 
		 
		 
		 тбСкл = Тбл.Скопировать();
		 тбСкл.Свернуть("Склад1","");
		 Для каждого стСкл из тбСкл Цикл
			 
			 
			 текОрг = стСкл.склад1.Организация;
			 Если ЗначениеЗаполнено(ТекОрг)=Ложь Тогда
				 ТекОрг = глДоступ.ПолучитьОрганизацию();
				// Сообщить("Ошибка определения организации по складу! "+стСкл.склад1);
				// продолжить;
			 КонецеСЛИ;
			 
			 СткСоединение = глОбщий.СткПолучитьСоединение(текОрг);
			 стрАПИ = "/"+текОрг.APIrest+"/hs/invAPI/SYNCSPR";
			 
			 Соединение = Новый HTTPСоединение(
			 СткСоединение.Сервер, // сервер (хост)
			 СткСоединение.Порт, // порт, по умолчанию для http используется 80, для https 443
			 СткСоединение.Логин, // пользователь для доступа к серверу (если он есть)
			 СткСоединение.Пароль, // пароль для доступа к серверу (если он есть)
			 , // здесь указывается прокси, если он есть
			 , // таймаут в секундах, 0 или пусто - не устанавливать
			 // защищенное соединение, если используется https
			 );
			 
			 
			 Запрос = Новый HTTPЗапрос(стрАПИ);
			 
			 
			 масДанные = Тбл.НайтиСтроки(Новый Структура("Склад1",стСкл.Склад1));
			 т1 = Тбл.Скопировать(масДанные);
			 стрХр = XMLСтрока(Новый ХранилищеЗначения(т1,Новый СжатиеДанных(5)));
			 Запрос.УстановитьТелоИзСтроки(стрХр);
			 
			 Результат = Соединение.ОтправитьДляОбработки(Запрос);
			 Если Результат.КодСостояния <> 200 Тогда 
				 Сообщить("Ошибка синхронизации: код "+Результат.КодСостояния+" "+стСкл.Склад1);
				 Сообщить(результат.ПолучитьТелоКакСтроку());
				 Возврат;
			 КонецЕСЛИ;
			 
			 Для каждого СтрМас из масДанные Цикл
				 Обк = СтрМас.ссылка1.ПолучитьОбъект();   
				 Если Обк.ВерсияДанных <> стрМас.ВД Тогда Продолжить; КонецЕСли; //пока выгружали уже кто-то изменил
				  
				 //ПрочитатьОтвет(Обк,Результат.ПолучитьТелоКакСтроку());
				 Обк.ДатаСинхронизации = ДатаСинхронизации;
				 
				 Обк.ОбменДанными.Загрузка = Истина;
				 Обк.ЗаписатЬ();
			 Конеццикла;
			 
		 Конеццикла;
		 
		//Сформируем документ	 
		 Если НужноЗакрытьДень=Истина Тогда
			 
			 Запрос = Новый Запрос;
			 Запрос.Текст = "ВЫБРАТЬ
			 |	СинхроДвж.Склад КАК Склад1,
			 |	СинхроДвж.Склад.код КАК Склад1Код,
			 |	СинхроДвж.Склад.Организация КАК Организация,
			 |	СинхроДвж.Дата КАК Дт
			 |ИЗ
			 |	РегистрСведений.СинхроДвж КАК СинхроДвж
			 |ГДЕ
			 |	ДатаСинхронизации = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			 |ORDER BY СинхроДвж.Дата
			 |";
			 
			 ТБл = Запрос.Выполнить().Выгрузить();
			 
			 Для каждого стСкл из ТБл Цикл
				 
				 
				 текОрг = стСкл.Организация;
				 Если ЗначениеЗаполнено(ТекОрг)=Ложь Тогда
					 ТекОрг = глДоступ.ПолучитьОрганизацию();
					 //Сообщить("Ошибка определения организации по складу! "+стСкл.склад1);
					 //продолжить;
				 КонецеСЛИ;
				 
				 СткСоединение = глОбщий.СткПолучитьСоединение(текОрг);
				 стрАПИ = "/"+текОрг.APIrest+"/hs/invAPI/ZKRTMC" + "?DtZkr="+Формат(стСкл.ДТ,"ДФ=yyyyMMdd")+"&Skl="+СокрлП(стСкл.Склад1Код);
				 
				 
				 Соединение = Новый HTTPСоединение(
				 СткСоединение.Сервер, // сервер (хост)
				 СткСоединение.Порт, // порт, по умолчанию для http используется 80, для https 443
				 СткСоединение.Логин, // пользователь для доступа к серверу (если он есть)
				 СткСоединение.Пароль, // пароль для доступа к серверу (если он есть)
				 , // здесь указывается прокси, если он есть
				 5, // таймаут в секундах, 0 или пусто - не устанавливать
				 // защищенное соединение, если используется https
				 );
				 
				 
				 Запрос = Новый HTTPЗапрос(стрАПИ);
				 Результат = Соединение.ОтправитьДляОбработки(Запрос);
				 Если Результат.КодСостояния <> 200 Тогда 
					 Сообщить("Ошибка синхронизации: код "+Результат.КодСостояния+" "+стСкл.Склад1);
					 Сообщить(результат.ПолучитьТелоКакСтроку());
					 Возврат;
				 КонецЕСЛИ;
				 
				 
				 Зап = РегистрыСведений.СинхроДвж.СоздатьМенеджерЗаписи();
				 Зап.Склад = стСкл.Склад1;
				 Зап.Дата = стСкл.Дт;
				 Зап.ДатаСинхронизации         = ТекущаяДата();
				 Зап.ИнфоПослДатаСинхронизации = ДатаСинхронизации;
				 Зап.Записать();
			 КонецЦикла;
			 
			 глОбщий.ЗагрузитьОстаткиНаСервере();
			 
		 КонецЕСЛИ;
			 
	
Конецпроцедуры




&НаСервере
Процедура ВыгрузитьПересорт()  экспорт
	
	
	
	Запрос = новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	""двжПересорт"" КАК ВидСпр,
	                |	ЛОЖЬ КАК ЭтоГруппа,
	                |	двжПересорт.ПометкаУдаления КАК ПометкаУдаления,
	                |	двжПересорт.Ссылка КАК Ссылка1,
	                |	двжПересорт.Дата КАК Дата,
	                |	двжПересорт.Склад КАК Склад1,
	                |	двжПересорт.Номенклатура КАК Номенклатура,
	                |	двжПересорт.НоменклатураНовая КАК НоменклатураНовая,
	                |	двжПересорт.Количество КАК Количество,
	                |	двжПересорт.Лог КАК Лог,
	                |	двжПересорт.Место КАК Место,
	                |	двжПересорт.сткМесто КАК сткМесто,
	                |	двжПересорт.Отменить КАК Отменить
	                |ИЗ
	                |	Справочник.двжПересорт КАК двжПересорт
	                |ГДЕ
	                |	двжПересорт.ДатаСинхронизации = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
	
	
	
	     ТБл = Запрос.Выполнить().Выгрузить();
		 Если Тбл.Количество()=0 Тогда Возврат; КонецЕСЛИ;
		 
		 
		 Тбл.Колонки.Добавить("GUID");
		 Тбл.Колонки.Добавить("СкладGUID");
		 Тбл.Колонки.Добавить("НоменклатураGUID");
		 Тбл.Колонки.Добавить("НоменклатураНоваяGUID");
		 Для каждого Стр из Тбл Цикл
			 Стр.GUID    		  		= Стр.ссылка1.УникальныйИдентификатор();
			 Стр.СкладGUID        		= Стр.Склад1.УникальныйИдентификатор();
			 Стр.НоменклатураGUID       = Стр.Номенклатура.УникальныйИдентификатор();
			 Стр.НоменклатураНоваяGUID  = Стр.НоменклатураНовая.УникальныйИдентификатор();
		 Конеццикла;
		 
		 Тбл.Колонки.Удалить("Номенклатура");
		 Тбл.Колонки.Удалить("НоменклатураНовая");
		 
		 
		 
		 тбСкл = Тбл.Скопировать();
		 тбСкл.Свернуть("Склад1","");
		 Для каждого стСкл из тбСкл Цикл
			 
			 
			 текОрг = стСкл.склад1.Организация;
			 Если ЗначениеЗаполнено(ТекОрг)=Ложь Тогда
				 Сообщить("Ошибка определения организации по складу! "+стСкл.склад1);
				 продолжить;
			 КонецеСЛИ;
			 
			 СткСоединение = глОбщий.СткПолучитьСоединение(текОрг);
			 стрАПИ = "/"+текОрг.APIrest+"/hs/invAPI/SYNCSPR";
			 
			 Соединение = Новый HTTPСоединение(
			 СткСоединение.Сервер, // сервер (хост)
			 СткСоединение.Порт, // порт, по умолчанию для http используется 80, для https 443
			 СткСоединение.Логин, // пользователь для доступа к серверу (если он есть)
			 СткСоединение.Пароль, // пароль для доступа к серверу (если он есть)
			 , // здесь указывается прокси, если он есть
			 , // таймаут в секундах, 0 или пусто - не устанавливать
			 // защищенное соединение, если используется https
			 );
			 
			 
			 Запрос = Новый HTTPЗапрос(стрАПИ);
			 
			 
			 масДанные = Тбл.НайтиСтроки(Новый Структура("Склад1",стСкл.Склад1));
			 т1 = Тбл.Скопировать(масДанные);
			 стрХр = XMLСтрока(Новый ХранилищеЗначения(т1,Новый СжатиеДанных(5)));
			 Запрос.УстановитьТелоИзСтроки(стрХр);
			 
			 Результат = Соединение.ОтправитьДляОбработки(Запрос);
			 Если Результат.КодСостояния <> 200 Тогда 
				 Сообщить("Ошибка синхронизации: код "+Результат.КодСостояния+" "+стСкл.Склад1);
				 Сообщить(результат.ПолучитьТелоКакСтроку());
				 Возврат;
			 КонецЕСЛИ;
			 
			 Для каждого СтрМас из масДанные Цикл
				 Обк = СтрМас.ссылка1.ПолучитьОбъект();
				 //ПрочитатьОтвет(Обк,Результат.ПолучитьТелоКакСтроку());
				 Обк.ДатаСинхронизации = ТекущаяДата();
				 
				 Обк.ОбменДанными.Загрузка = Истина;
				 Обк.ЗаписатЬ();
			 Конеццикла;
			 
		 Конеццикла;
		 
		 //Проведем списание
		 ТБл.свернуть("Дата,Склад1","");
		 
		 Для каждого стСкл из ТБл Цикл
			 
			 
			 текОрг = стСкл.склад1.Организация;
			 Если ЗначениеЗаполнено(ТекОрг)=Ложь Тогда
				 Сообщить("Ошибка определения организации по складу! "+стСкл.склад1);
				 продолжить;
			 КонецеСЛИ;
			 
			 СткСоединение = глОбщий.СткПолучитьСоединение(текОрг);
			 стрАПИ = "/"+текОрг.APIrest+"/hs/invAPI/ZKRPER" + "?DtZkr="+Формат(стСкл.Дата,"ДФ=yyyyMMdd")+"&Skl="+СокрлП(стСкл.Склад1.Код);
			 
			 
			 Соединение = Новый HTTPСоединение(
			 СткСоединение.Сервер, // сервер (хост)
			 СткСоединение.Порт, // порт, по умолчанию для http используется 80, для https 443
			 СткСоединение.Логин, // пользователь для доступа к серверу (если он есть)
			 СткСоединение.Пароль, // пароль для доступа к серверу (если он есть)
			 , // здесь указывается прокси, если он есть
			 , // таймаут в секундах, 0 или пусто - не устанавливать
			 // защищенное соединение, если используется https
			 );
			 
			 
			 Запрос = Новый HTTPЗапрос(стрАПИ);
			 Результат = Соединение.ОтправитьДляОбработки(Запрос);
			 Если Результат.КодСостояния <> 200 Тогда 
				 Сообщить("Ошибка синхронизации: код "+Результат.КодСостояния+" "+стСкл.Склад1);
				 Сообщить(результат.ПолучитьТелоКакСтроку());
				 Возврат;
			 КонецЕСЛИ;
			 
		 КонецЦикла;
		 
			 
	
Конецпроцедуры
	 
&НаСервере
Функция ПолучитьСткКолИД(Тбл,МасКол)  //МасКол убрать??
	
	СткКолИд = Новый Структура();
	Для каждого Кол из Тбл.Колонки Цикл
		Если Кол.Имя = "НомерСтроки" Тогда Продолжить; КонецЕСЛИ;
		Если Кол.Имя = "строкаМесто" Тогда Продолжить; КонецЕСЛИ;
		Если Кол.Имя = "ДатаИзменения" Тогда Продолжить; КонецЕСЛИ;
		
		пТип= ТипЗнч(Тбл[0][Кол.Имя]);
		Если пТип = Тип("Дата") Тогда
			//XMLЗначение(Тип("Дата"),XMLстрока(Тбл[0][Кол.Имя]))
			СткКолИд.Вставить(Кол.Имя,"XMLЗначение(Тип(""Дата""),XMLстрока("""); 
		ИНачеЕсли пТип = Тип("Число") Тогда
			//XMLЗначение(Тип("Дата"),XMLстрока(Тбл[0][Кол.Имя]))
			СткКолИд.Вставить(Кол.Имя,"XMLЗначение(Тип(""Число""),XMLстрока("""); 
		ИНачеЕсли пТип = Тип("Строка") Тогда
			СткКолИд.Вставить(Кол.Имя,"XMLЗначение(Тип(""Строка""),XMLстрока("""); 
			//МасКол.Добавить(Кол.Имя); 
		ИНаче
			//+"Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор("+XMLстрока(Тбл[0][Кол.Имя])+"))"
			СткКолИд.Вставить(Кол.Имя,"Справочники"+Сред(XMLТипЗнч(Тбл[0][Кол.Имя]).ИмяТипа,11)+".ПолучитьСсылку(Новый УникальныйИдентификатор("""); 
		КонеЦЕСЛИ;
	КонецЦикла;
	
	Возврат СткКолИд;
	
КонецФункции
	 
&НаСервере
Функция ПолучитьСтрПарЗаписиИнв(Стр,МасКол,СткКолИд,ВидСпр)
	
	СтрПАр="";
	СтрПАр = СтрПар + "Vid"+Символы.ПС+ВидСпр+Символы.ПС;
	
	Для каждого Эл из МасКол Цикл
		СтрПАр = СтрПар + Эл+Символы.ПС+""""+СокрлП(Стр[Эл])+""""+Символы.ПС;
	КонецЦикла;
	
	Для каждого Эл из СткКолИд Цикл
		Если ЗначениеЗаполнено(Стр[Эл.Ключ]) Тогда
			СтрПАр = СтрПар + Эл.Ключ+Символы.ПС
			+Эл.Значение+XMLстрока(Стр[Эл.Ключ])+"""))"
			//+"Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор("+XMLстрока(Стр[Эл.Ключ])+"))"
			+Символы.ПС;
		ИНАче
			СтрПАр = СтрПар + Эл.Ключ+Символы.ПС+""+Символы.ПС;
		КонецесЛИ;
	КонецЦикла;
	
	
	Возврат стрПар;
	
КонецФункции

&НаСервере
Процедура ВыгрузитьДок(ссДок) Экспорт
	
	Если ЗначениеЗаполнено(ссдок)=Ложь тогда Возврат; КонецЕСЛИ;
	Если ссДок.ДатаСинхронизации <> Дата(1,1,1) ТОгда
		Сообщить("Изменений в документе не обнаружено. Выгрузка не требуется");
		Возврат;
	КонецЕсли;
	
	Обк = ссДок.ПолучитьОбъект();
	
	текОрг = Обк.склад.Организация;
	Если ЗначениеЗаполнено(ТекОрг)=Ложь Тогда
		Сообщить("Ошибка определения организации по складу!");
		Возврат;
	КонецеСЛИ;
	
		СткСоединение = глОбщий.СткПолучитьСоединение(текОрг);
		стрАПИ = "/"+текОрг.APIrest+"/hs/invAPI/SYNCDOC";
	
	
		Соединение = Новый HTTPСоединение(
        СткСоединение.Сервер, // сервер (хост)
        СткСоединение.Порт, // порт, по умолчанию для http используется 80, для https 443
        СткСоединение.Логин, // пользователь для доступа к серверу (если он есть)
        СткСоединение.Пароль, // пароль для доступа к серверу (если он есть)
        , // здесь указывается прокси, если он есть
        , // таймаут в секундах, 0 или пусто - не устанавливать
          // защищенное соединение, если используется https
    );
	
	
	
		Запрос = Новый HTTPЗапрос(стрАПИ);
		
		МасКол = Новый Массив;

		СткКолИд = ПолучитьСткКолИД(Обк.Товары.выгрузить(),МасКол);
		ТекСтрПар = ПолучитьСтрПарДокумент(Обк,СткКолИд);
		
		Хранилище = Новый ХранилищеЗначения(ТекСтрПар, Новый СжатиеДанных(9));
		Запрос.УстановитьТелоИзСтроки(XMLСтрока(Хранилище));
		//Запрос.УстановитьТелоИзДвоичныхДанных(ПолучитьДвоичныеДанныеИзСтроки(ТекСтрПар));
		
		Результат = Соединение.ОтправитьДляОбработки(Запрос);
		Если Результат.КодСостояния <> 200 Тогда 
			Сообщить("Ошибка синхронизации: код "+Результат.КодСостояния);
			Сообщить(результат.ПолучитьТелоКакСтроку());
			Возврат;
		КонецЕСЛИ;
		
		//ПрочитатьОтвет(Обк,Результат.ПолучитьТелоКакСтроку());
		Обк.ДатаСинхронизации = ТекущаяДата();
		Обк.Проведен = Истина;
		
		Обк.ОбменДанными.Загрузка = Истина;
		Обк.ЗаписатЬ();
	
	
КонецПроцедуры

#Область ВыгрузитьДокумент
//---------------------------------------
Функция АлгаДокТаб(ссДок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НакладнаяРасходнаяТовары.Номенклатура КАК Номенклатура,
	               |	НакладнаяРасходнаяТовары.Количество КАК Количество,
	               |	НакладнаяРасходнаяТовары.строкаМесто КАК строкаМесто,
	               |	НакладнаяРасходнаяТовары.сткМесто КАК сткМесто
	               |ИЗ
	               |	Документ.НакладнаяРасходная.Товары КАК НакладнаяРасходнаяТовары
	               |ГДЕ
	               |	НакладнаяРасходнаяТовары.Ссылка = &Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НакладнаяРасходнаяТовары.НомерСтроки УБЫВ";
	
	Запрос.УстановитьПараметр("Ссылка",ссДок);
	Запрос.УстановитьПараметр("Дт1",НачалоМесяца(ссДок.Дата));
	Запрос.УстановитьПараметр("Дт2",КонецМесяца(ссДок.Дата)+1);
	
	Тбл = Запрос.Выполнить().Выгрузить();
	Тбл.Колонки.Добавить("НоменклатураGUID");
	
	Для каждого Стр из Тбл Цикл
		Стр.НоменклатураGUID = Стр.Номенклатура.УникальныйИдентификатор();
	КонецЦикла;
	
	Тбл.Колонки.Удалить("Номенклатура");
	
	Возврат Тбл;
	
КонецФункции

Функция АлгаДок(ссДок) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НакладнаяРасходная.Ссылка КАК GUID,
	               |	НакладнаяРасходная.СкладПриемник.Организация.Код КАК ИННКонтрагентаДляПоиска,
	               |	НакладнаяРасходная.Склад КАК СкладGUID,
	               |	Ложь СуммаВключаетНДС,
	               |	Истина УчитыватьНДС,
	               |	НакладнаяРасходная.Дата
	               |ИЗ
	               |	Документ.НакладнаяРасходная КАК НакладнаяРасходная
	               |ГДЕ
	               |	НакладнаяРасходная.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка",ссДок);
	Запрос.УстановитьПараметр("ВидДок",);
	
	Тбл = Запрос.Выполнить().Выгрузить();
	
	Стк = Новый Структура();
	Для каждого Кол из Тбл.Колонки Цикл
		Если Найти(Кол.Имя,"GUID")<>0 Тогда
			Стк.Вставить(Кол.Имя,Тбл[0][Кол.Имя].УникальныйИдентификатор());	
		Иначе
			Стк.Вставить(Кол.Имя,Тбл[0][Кол.Имя]);
		КонецЕсли;
	КонецЦикла;
	
	Стк.Вставить("ВидДок",СтрЗаменить(XMLстрока(ссДок.ВидДокумента),"_",""));
	Стк.Вставить("КратностьВзаиморасчетов",1);
	Стк.Вставить("КурсВзаиморасчетов",1);
	Стк.Вставить("КодВидаОперации","01");
	Стк.Вставить("СкладПриемникГУИД",ссДок.СкладПриемник.УникальныйИдентификатор());
	Стк.Вставить("Комментарий","Документ "+ссДок.Номер+" от "+стк.Дата);
	Если ссДок.ВидДокумента = Перечисления.ВидДокумента.ПеремещениеТоваров Тогда
		Стк.Вставить("СкладОтправительГУИД",Стк.СкладGUID);
		Стк.Удалить("СкладGUID");
		Стк.Удалить("ИННКонтрагентаДляПоиска");
	КонецесЛИ;
	
	Стк.Вставить("Таблица_Товары",АлгаДокТаб(ссДок));
	
	
	Возврат XMLстрока(Новый ХранилищеЗначения(Стк,Новый СжатиеДанных(5)));
	
	
КонецФункции

Процедура ВыгрузитьДокумент(ссДок) Экспорт
	
	
	Если ЗначениеЗаполнено(ссдок)=Ложь тогда Возврат; КонецЕСЛИ;
	Если ссДок.ДатаСинхронизации <> Дата(1,1,1) ТОгда
		Сообщить("Изменений в документе не обнаружено. Выгрузка не требуется");
		Возврат;
	КонецЕсли;
	
	Обк = ссДок.ПолучитьОбъект();
	
	текОрг = Обк.склад.Организация;
	Если ЗначениеЗаполнено(ТекОрг)=Ложь Тогда
		Сообщить("Ошибка определения организации по складу!");
		Возврат;
	КонецеСЛИ;
	
	СткСоединение = глОбщий.СткПолучитьСоединение(текОрг);
	стрАПИ = "/"+текОрг.APIrest+"/hs/invAPI/LOADDOC";
	
	
	Соединение = Новый HTTPСоединение(
	СткСоединение.Сервер, // сервер (хост)
	СткСоединение.Порт, // порт, по умолчанию для http используется 80, для https 443
	СткСоединение.Логин, // пользователь для доступа к серверу (если он есть)
	СткСоединение.Пароль, // пароль для доступа к серверу (если он есть)
	, // здесь указывается прокси, если он есть
	, // таймаут в секундах, 0 или пусто - не устанавливать
	// защищенное соединение, если используется https
	);
	
	
	Запрос = Новый HTTPЗапрос(стрАПИ);
	Запрос.УстановитьТелоИзСтроки(АлгаДок(ссДок));
	                                                   
	Результат = Соединение.ОтправитьДляОбработки(Запрос);
	Если Результат.КодСостояния <> 200 Тогда 
		Сообщить("Ошибка синхронизации: код "+Результат.КодСостояния);
		Сообщить(результат.ПолучитьТелоКакСтроку());
		Возврат;
	КонецЕСЛИ;
	
	//ПрочитатьОтвет(Обк,Результат.ПолучитьТелоКакСтроку());
	Обк.ДатаСинхронизации = ТекущаяДата();
	Обк.Проведен = Истина;
	
	Обк.ОбменДанными.Загрузка = Истина;
	Обк.ЗаписатЬ();
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПолучитьДанныеПоДокументу(ссДок) экспорт
	
	Обк = ссДок.ПолучитьОбъект();
	
	текОрг = Обк.склад.Организация;
	Если ЗначениеЗаполнено(ТекОрг)=Ложь Тогда
		Сообщить("Ошибка определения организации по складу!");
		Возврат Неопределено;
	КонецеСЛИ;
	
		СткСоединение = глОбщий.СткПолучитьСоединение(текОрг);
		стрАПИ = "/"+текОрг.APIrest+"/hs/invAPI/GETDOC";
	
	
		Соединение = Новый HTTPСоединение(
        СткСоединение.Сервер, // сервер (хост)
        СткСоединение.Порт, // порт, по умолчанию для http используется 80, для https 443
        СткСоединение.Логин, // пользователь для доступа к серверу (если он есть)
        СткСоединение.Пароль, // пароль для доступа к серверу (если он есть)
        , // здесь указывается прокси, если он есть
        , // таймаут в секундах, 0 или пусто - не устанавливать
          // защищенное соединение, если используется https
    );
	
	
	
		Запрос = Новый HTTPЗапрос(стрАПИ);
		
		Стк = Новый Структура();
		Стк.Вставить("ид",ссДок.УникальныйИдентификатор());
		Стк.Вставить("Вид",СтрЗаменить(XMLстрока(ссДок.ВидДокумента),"_",""));
		
		Хранилище = Новый ХранилищеЗначения(Стк);
		Запрос.УстановитьТелоИзСтроки(XMLСтрока(Хранилище));
		//Запрос.УстановитьТелоИзДвоичныхДанных(ПолучитьДвоичныеДанныеИзСтроки(ТекСтрПар));
		
		Результат = Соединение.ОтправитьДляОбработки(Запрос);
		Если Результат.КодСостояния <> 200 Тогда 
			Сообщить("Ошибка синхронизации: код "+Результат.КодСостояния);
			Сообщить(результат.ПолучитьТелоКакСтроку());
			Возврат Неопределено;
		КонецЕСЛИ;
		
		ТБл = XMLЗначение(Тип("ХранилищеЗначения"),результат.ПолучитьТелоКакСтроку()).Получить();
		Если ТипЗнч(ТБл)<>Тип("ТаблицаЗначений") Тогда
			Сообщить("Ошибка обработки ответа сервера!");
			Возврат Неопределено;
		КонецеСЛИ;
		
		Возврат Тбл;
	
КонецФункции

&НаСервере
Процедура ПечатьZPL(ссНом,IP,ЭтоМесто=Ложь) Экспорт
	
	Если ЗначениеЗаполнено(ссНом)=Ложь Тогда Возврат; КонецЕслИ;
	
	
	АдресПечати = глДоступ.ПолучитьАдресСервераПечати();
	Если АдресПечати<>"" ТОгда
		текОрг = Новый Структура("ВнешнийАдрес,ВнутреннийАдрес,APIrest",АдресПечати,АдресПечати,"Base1s");
	Иначе
		текОрг = глДоступ.ПолучитьОсновнойСклад().Организация;
		Если ЗначениеЗаполнено(ТекОрг)=Ложь Тогда
			Сообщить("Ошибка определения организации по складу!");
			Возврат;
		КонецеСЛИ;
	КонецеСЛИ;
	
	стрАПИ = "/"+текОрг.APIrest+"/hs/invAPI/PRINTZPL";

	СткСоединение = глОбщий.СткПолучитьСоединение(текОрг);
	
	Соединение = Новый HTTPСоединение(
	СткСоединение.Сервер, // сервер (хост)
	СткСоединение.Порт, // порт, по умолчанию для http используется 80, для https 443
	СткСоединение.Логин, // пользователь для доступа к серверу (если он есть)
	СткСоединение.Пароль, // пароль для доступа к серверу (если он есть)
	, // здесь указывается прокси, если он есть
	, // таймаут в секундах, 0 или пусто - не устанавливать
	// защищенное соединение, если используется https
	);
	
	
	Если ЭтоМесто Тогда
		СтрПАр="";
		СтрПАр = СтрПар + "vid"+Символы.ПС+"место"+Символы.ПС;
		СтрПАр = СтрПар + "IP"+Символы.ПС+СокрЛП(IP)+Символы.ПС;
		СтрПАр = СтрПар + "mst"+Символы.ПС+СокрЛП(ссНом)+Символы.ПС;
	Иначе
		СтрПАр="";
		СтрПАр = СтрПар + "vid"+Символы.ПС+"номенклатура"+Символы.ПС;
		СтрПАр = СтрПар + "IP"+Символы.ПС+СокрЛП(IP)+Символы.ПС;
		СтрПАр = СтрПар + "ИдНом"+Символы.ПС+ссНом.УникальныйИдентификатор()+Символы.ПС;
		СтрПАр = СтрПар + "Код"+Символы.ПС+ссНом.Код+Символы.ПС;
		СтрПАр = СтрПар + "Имя"+Символы.ПС+ссНом.Наименование+Символы.ПС;
		СтрПАр = СтрПар + "Ед"+Символы.ПС+ссНом.ЕдИзм+Символы.ПС;
	КонецеСЛИ;
	
	
	
	Запрос = Новый HTTPЗапрос(стрАПИ);
	
	Запрос.УстановитьТелоИзСтроки(СтрПАр);
	
	Результат = Соединение.ОтправитьДляОбработки(Запрос);
	Если Результат.КодСостояния <> 200 Тогда 
		Сообщить(результат.ПолучитьТелоКакСтроку());
		Сообщить("Ошибка печати этикетки: код "+Результат.КодСостояния+" "+ссНом.Наименование);
	КонецЕСЛИ;
	
		
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрПарДокумент(Обк,СткКолИд,ОбратныйПорядокСтрок = Истина)
	
	СтрПАр="";
	СтрПАр = СтрПар + "Vid"+Символы.ПС+СтрЗаменить(XMLстрока(Обк.ВидДокумента),"_","")+Символы.ПС;
	СтрПАр = СтрПар + "Дата"+Символы.ПС+"XMLЗначение(Тип(""Дата""),XMLстрока("""+XMLстрока(Обк.Дата)+"""))"+Символы.ПС;
	СтрПАр = СтрПар + "ГУИД"+Символы.ПС+СокрЛП(Обк.ссылка.УникальныйИдентификатор())+Символы.ПС;
	СтрПАр = СтрПар + "Номер"+Символы.ПС+Обк.Номер+Символы.ПС;
	СтрПАр = СтрПар + "Склад"+Символы.ПС+Обк.Склад.УникальныйИдентификатор()+Символы.ПС;
	//СтрПАр = СтрПар + "ОбъектВыгружен"+Символы.ПС+?(Обк.ДатаСинхронизации>Дата(1,1,1),1,0)+Символы.ПС;
	СтрПАр = СтрПар + "ОбъектВыгружен"+Символы.ПС+СокрЛП(1)+Символы.ПС;
	
	ном = 0;
	Для а=-Обк.ТОвары.Количество() по -1 Цикл
		Стр = Обк.ТОвары[-а-1];
		
		пСтр="";
		
		Для каждого Эл из СткКолИд Цикл
			пСтр = пСтр + Эл.Ключ+";"
			+Эл.Значение+XMLстрока(Стр[Эл.Ключ])+"""))"
			//+"Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор("+XMLстрока(Стр[Эл.Ключ])+"))"
			+";";
		КонецЦикла;
		
		Ном = ном+1;
		СтрПАр = СтрПар + "строка"+Ном+Символы.ПС+пСтр+Символы.ПС;
	КонецЦикла;
	
	Возврат стрПар;
	
КонецФункции

	 
&НаСервере
Функция ПолучитьСтрПар(сс,ВидСпр,НадоПерезаписать)
	СтрПАр="";
	СтрПАр = СтрПар + "GUID"+Символы.ПС+сс.ссылка.УникальныйИдентификатор()+Символы.ПС;
	СтрПАр = СтрПар + "GUIDpar"+Символы.ПС+сс.Родитель.УникальныйИдентификатор()+Символы.ПС;
	СтрПАр = СтрПар + "Vid"+Символы.ПС+ВидСпр+Символы.ПС;
	СтрПАр = СтрПар + "GRP"+Символы.ПС+?(сс.ЭтоГруппа,1,0)+Символы.ПС;
	СтрПАр = СтрПар + "Mark"+Символы.ПС+?(сс.ПометкаУдаления,1,0)+Символы.ПС;
	СтрПАр = СтрПар + "Nam"+Символы.ПС+СокрлП(сс.наименование)+Символы.ПС;
	СтрПАр = СтрПар + "Change"+Символы.ПС+НадоПерезаписать+Символы.ПС;
	Если ВидСпр = "Номенклатура" Тогда
		СтрПАр = СтрПар + "Ed" +Символы.ПС+СокрлП(сс.ЕдИзм)+Символы.ПС;
		СтрПАр = СтрПар + "Art"+Символы.ПС+СокрлП(сс.Артикул);
	КонецеСЛИ;
	
	
	//СткПар = новый Структура;
	//ДЛя а=1 по СтрЧислоСтрок(СтрПар) Цикл
	//	СткПар.Вставить(СтрПолучитьСтроку(СтрПар,а),СтрПолучитьСтроку(СтрПар,а+1));
	//	а=а+1;
	//КонецЦикла;
	
	Возврат стрПар;
	
КонецФункции

&НаСервере
Функция ПолучитьСтрПарШтрихКод(сс,ВидСпр,НадоПерезаписать)
	СтрПАр="";
	СтрПАр = СтрПар + "GUIDnom"+Символы.ПС+сс.Номенклатура.УникальныйИдентификатор()+Символы.ПС;
	СтрПАр = СтрПар + "GUIDprz"+Символы.ПС+сс.Производитель.УникальныйИдентификатор()+Символы.ПС;
	СтрПАр = СтрПар + "Vid"+Символы.ПС+ВидСпр+Символы.ПС;
	СтрПАр = СтрПар + "Bar"+Символы.ПС+СокрлП(сс.ШтрихКод)+Символы.ПС;
	СтрПАр = СтрПар + "Change"+Символы.ПС+НадоПерезаписать+Символы.ПС;
	
	//СткПар = новый Структура;
	//ДЛя а=1 по СтрЧислоСтрок(СтрПар) Цикл
	//	СткПар.Вставить(СтрПолучитьСтроку(СтрПар,а),СтрПолучитьСтроку(СтрПар,а+1));
	//	а=а+1;
	//КонецЦикла;
	
	Возврат стрПар;
	
КонецФункции

&НаСервере
Процедура ПрочитатьОтвет(Обк,Ответ)
	 
	чтДЖ = Новый ЧтениеJSON;
	чтДЖ.УстановитьСтроку(Ответ);
    чтДЖ.Прочитать();	
	Пока чтДЖ.Прочитать() Цикл
		 
		Если  чтДж.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоМассива Тогда Продолжить; КонецеСЛИ;
		Если  чтДж.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива Тогда Продолжить; КонецеСЛИ;
		
		Если  чтДж.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда 
			Стк  = Новый Структура();
			Продолжить; 
		ИначеЕсли  чтДж.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда 
			
			Продолжить; 
		ИначеЕсли  чтДж.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда 
			свво = чтДж.ТекущееЗначение;
			чтДЖ.Прочитать();
			Если  чтДж.ТипТекущегоЗначения = ТипЗначенияJSON.Строка или чтДж.ТипТекущегоЗначения = ТипЗначенияJSON.Число или чтДж.ТипТекущегоЗначения = ТипЗначенияJSON.Булево  Тогда 
				Если свво = "Код" Тогда
					//Обк.Код =  чтДж.ТекущееЗначение;
					//Сообщить("Код - "+чтДж.ТекущееЗначение);
				КонецеСЛИ;
			КонецЕсли;
		КонецеСЛИ;
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКлючФоновогоЗадания(Ключ) Экспорт
	
	Мас = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Ключ",Ключ));
	  Если МАс.Количество()=0 ТОгда
		  Возврат Истина;
	  КонецеСЛИ;
	  фнЗад = Мас[0];
	  
	  Если фнЗад.Состояние = СостояниеФоновогоЗадания.Активно ТОгда
		  Возврат "Идет загрзка в фоне. Начало в "+фнЗад.Начало;
	  ИНАче
		  Возврат Истина;
	  КонецеСЛИ;
	
КонецФункции


&НаСервере
Процедура ЗагрузитьНоменклатуруАлга(Метод,Орг=Неопределено,ДтИзм = Неопределено,АдресХранилища=Неопределено,НеВФоне=ЛОжь) экспорт
	
	
		СткСоединение = глОбщий.СткПолучитьСоединение(Орг);
		
		Соединение = Новый HTTPСоединение(
        СткСоединение.Сервер, // сервер (хост)
        СткСоединение.Порт, // порт, по умолчанию для http используется 80, для https 443
        СткСоединение.Логин, // пользователь для доступа к серверу (если он есть)
        СткСоединение.Пароль, // пароль для доступа к серверу (если он есть)
        , // здесь указывается прокси, если он есть
        , // таймаут в секундах, 0 или пусто - не устанавливать
          // защищенное соединение, если используется https
    );
	
	Если Орг = Неопределено ТОгда
		Апи = "Urals_BUH";
	ИНаче
		Апи = Орг.APIrest;
	КонецеСЛИ;
	
	ТекстЗапроса = "/"+Апи+"/hs/invAPI/"+Метод+"?ksPar=1";
	Если  ДтИзм<>Неопределено Тогда
		 ТекстЗапроса = ТекстЗапроса + "&izmDt="+Формат(ДтИзм-600,"ДФ=yyyyMMddHHmmss");
	 КонецЕСЛИ;
	
	//Запрос = Новый HTTPЗапрос("/buh/hs/invAPI/refskl");
	
	Запрос = Новый HTTPЗапрос(ТекстЗапроса);
 
    // Получаем текст корневой страницы через GET-запрос.
	//Если ВремСкл<>Неопределено Тогда
	//ИначеЕсли ДтИзм=Неопределено Тогда
	//	Запрос = Новый HTTPЗапрос("/Urals_BUH/hs/invAPI/ref");
	//ИНаче
	//	Запрос = Новый HTTPЗапрос("/Urals_BUH/hs/invAPI/ref?izmDt="+Формат(ДтИзм-60,"ДФ=yyyyMMddHHmmss"));
	//КонецЕСЛИ;
    // Если бы нужна была другая страница, мы бы указали,
    // например, "/about" или "/news".
 
    Результат = Соединение.Получить(Запрос);
	
	Если Результат.КодСостояния <> 200 Тогда 
		Сообщить("Ошибка синхронизации: код "+Результат.КодСостояния);
		Сообщить(результат.ПолучитьТелоКакСтроку());
		Возврат ;
	КонецЕСЛИ;
 
    //Сообщить("Нам вернули код: " + Результат.КодСостояния);
    // Что примерно означают коды результата запроса:
    // [100, 299] - хороший код возврата
    // [300, 399] - нас перенаправляют на другую страницу,
    //              причём 302 - код постоянного перенаправления
    // [400, 499] - ошибка запроса
    // [500, 599] - ошибка сервера
 
    // в теле результата запроса - текст обычной html страницы
	//Сообщить("Тело результата: " + Результат.ПолучитьТелоКакСтроку()); 
	
	
	
	дтЗагрИзм=Неопределено;
	Если ПрочитатьОтветОбк(Результат.ПолучитьТелоКакСтроку(),дтЗагрИзм,АдресХранилища,НеВФоне) <> Истина Тогда
		Сообщить("Ошибка загрузки!");
		Возврат;
	КонецЕСЛИ;
	 
	Если дтЗагрИзм<>Неопределено и нрег(Метод) = "ref" Тогда
		глОбщий.ЗаписатьРегСинхро("Номенклатура",дтЗагрИзм);
	КонецЕСЛИ;
	
	
КонецПроцедуры


&НаСервере
Функция ПрочитатьОтветОбк(ТелоСтр,дтИзм,АдресВременногоХранилища=Неопределено,НеВФоне=ЛОжь)  Экспорт
	
	
	Если ТипЗнч(ТелоСтр) = Тип("ТаблицаЗначений") Тогда
		Тбл = ТелоСтр;
	Иначе
		Мас   = XMLзначение(Тип("ХранилищеЗначения"),ТелоСтр).Получить();
		Тбл   = Мас[1];
		дтИзм = Мас[0];
	КонецЕсли;
	
	Тбл.Колонки.Добавить("Инд",Новый ОписаниеТипов("Число"));
	Тбл.Колонки.Добавить("ИндНов",Новый ОписаниеТипов("Число"));
	Тбл.ЗаполнитьЗначения(1,"Инд");
	
	Если НеВФоне = Ложь Тогда
		АдресВременногоХранилища = ПоместитьВоВременноеХранилище(0); 	
		
		
		ПараметрыФоновогоЗадания = Новый Массив;	
		ПараметрыФоновогоЗадания.Добавить(АдресВременногоХранилища);   	// параметр 1	
		ПараметрыФоновогоЗадания.Добавить(Тбл);	// параметр 2
		
		ID_ФоновогоЗадания = ФоновыеЗадания.Выполнить("глФоновыеЗадания.ПрочитатьОтветОбкСПрогрессБаром", 
		ПараметрыФоновогоЗадания, "ЗагрузкаСправочника", "Загрузка справочника").УникальныйИдентификатор;
		
	Иначе
		
		СткКол = Новый Структура();
		Для каждого Кол из Тбл.Колонки Цикл
			СткКол.Вставить(Кол.имя,"");
		Конеццикла;
		
		Для каждого Стр из тбл Цикл
			ЗаписатьОбк(стр,СткКол);
		Конеццикла;
		
		Тхт = "Загружено "+Тбл.Количество()+" объектов";
		ТБл.свернуть("ВидСпр","Инд,ИНднов");
		Для каждого Стр из Тбл Цикл
			Тхт = Тхт+Символы.ПС+" "+Стр.видСпр+" = "+Стр.инд+" в т.ч. новых = "+Стр.индНов;
		КонецЦикла;
		
		Сообщить(тхт);
	КонецЕСли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗаписатьОбк(Стр,СткКол,МасОбкНеНайден=Неопределено) экспорт
	
	Если Стр.ВидСпр = "ШтрихКоды" Тогда
		Возврат ЗаписатьРегСведений(Стр);
	КонецЕслИ;
	
	сс = Справочники[Стр.ВидСпр].ПолучитьСсылку(Новый УникальныйИдентификатор(Стр.GUID));
	
	учетПоГРуппам =   Метаданные.Справочники[Стр.ВидСпр].Иерархический;
	
	Если глОбщий.СсылкаСуществует(сс,Стр.ВидСпр)=ложь  Тогда
		Если Стр.ЭтоГруппа=true Тогда
			Если учетПоГРуппам = Ложь ТОгда Возврат Истина; КонецЕСли;
			Обк = справочники[Стр.ВидСпр].СоздатьГруппу();
		ИНаче
			Обк = справочники[Стр.ВидСпр].СоздатьЭлемент();
		КонецесЛИ;
		Обк.УстановитьСсылкуНового(сс);
		
	Иначе
		обк = сс.ПолучитьОбъект();
	КонецЕСЛИ;
	
	Если СткКол.Свойство("ОрганизацияGUID")=истина Тогда
		Обк.Организация = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(Стр.ОрганизацияGUID));
	КонецЕСЛИ;
	
	ОбкЭтоГруппа = Ложь;
	Если учетПоГРуппам=истина ТОгда
		ОбкЭтоГруппа = Обк.ЭтоГруппа;
		
		Если СткКол.Свойство("РодительGUID") Тогда
			Обк.Родитель = Справочники[Стр.ВидСпр].ПолучитьСсылку(Новый УникальныйИдентификатор(Стр.РодительGUID));
		КонецЕСЛИ;
	КонецеСЛИ;
	
	Если ОбкЭтоГруппа=true Тогда
		ЗаполнитьЗначенияСвойств(Обк,Стр,"Наименование,Код");
	ИНаче
		ЗаполнитьЗначенияСвойств(Обк,Стр);
		Мета = Обк.Метаданные().Реквизиты;
		
		Для каждого КлЗн из СткКол Цикл
			Если Найти(клЗн.ключ,"GUID")=0 Тогда Продолжить; КонецеСЛИ;
			Рек = СокрЛП(СтрЗаменить(клЗн.ключ,"GUID",""));
			Если Рек = "" Тогда Продолжить; КонецЕСЛИ;
			Если Мета.Найти(Рек)=Неопределено ТОгда Продолжить; КонецеСЛИ;
			
			п=XMLТипЗнч(Обк[Рек]).TypeName; 
			пТипСпр = Сред(п,Найти(п,".")+1);
			Гуид = Новый УникальныйИдентификатор(Стр[клЗн.ключ]);
			
			Обк[Рек] = Справочники[пТипСпр].ПолучитьСсылку(ГУИД);
		Конеццикла;
		
		Если Стр.ВидСпр = "Склады" Тогда
			Обк.Организация = Справочники.Организации.НайтиПоКоду(Стр.ОрганизацияINN);
		КонецЕсли;
	КонецЕСЛИ;
	
	
	Обк.ОбменДанными.Загрузка = Истина;
	//Обк.ДатаИзменения = Дата(1,1,1);
	//Обк.ДатаСинхронизации = Дата(1,1,1);
	Попытка
		Обк.Записать();
	Исключение
		Возврат Ложь;
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Если СткКол.Свойство("ПометкаУдаления") Тогда
		Если Стр.ПометкаУдаления <> Обк.ПометкаУдаления Тогда
			Обк.установитьПометкуУдаления(Стр.ПометкаУдаления);
		КонецЕСЛИ;
	КонецЕСЛИ;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗаписатьРегСведений(Стк)
	
	Обк = регистрыСведений.ШтрихКоды.СоздатьНаборЗаписей();
	Обк.Отбор.ШтрихКод.Значение = Стк.Наименование;
	Обк.Отбор.ШтрихКод.Использование = Истина;
	
	Зап = Обк.Добавить();
	Зап.ШтрихКод = Стк.Наименование;
	Зап.Номенклатура  = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Стк.НоменклатураGUID));
	Зап.Производитель = Справочники.Производители.ПолучитьСсылку(Новый УникальныйИдентификатор(Стк.ПроизводительGUID));
	Зап.ДатаИзменения = Дата(1,1,1);
	
	Обк.ОбменДанными.Загрузка = Истина;
	Обк.Записать();
	
	Возврат Истина;
		
КонецФункции


&НаСервере
Процедура Обмен(Инд=0) Экспорт
	
		ВыгрузитьНовыеСправочники();
		Если Инд=0 Тогда
			ВыгрузитьЗаписиИнвентаризации(ТекущаяДата()- 7 *60);
		ИНаче
			ВыгрузитьЗаписиИнвентаризации();
		КонецЕСЛИ;
		ВыгрузитьДвжТМЦ(Инд<>0);
		ВыгрузитьПересорт();
		ВыгрузитьЗапросыНаВыдачуТМЦ();
		
		Стк = глОбщий.ОбновитьДтСинхроНасервере();
		ЗагрузитьНоменклатуруАлга("ref",,Стк.Номенклатура-инд);
			
КонецПроцедуры
	
&НаСервере
Процедура PUSH(АдресХранилища) Экспорт
	//а1(); возврат;
	
	//НомерПроекта =  "574573855985";
	//IDПодписчика = ДоставляемыеУведомления.ПолучитьИдентификаторПодписчикаУведомлений(НомерПроекта);
		глОбщий.ЗаписатьРегСинхро("PUSHВФоне",ТекущаяДата());
	
	
	пИмя = глДоступ.ПолучитьИмяПользователя();
	
	Стк = Новый Структура();
	СткХр = глДоступ.ПолучитьСтруктураДанныхКлиента();
	Если ТипЗнч(СткХр) = Тип("Структура") Тогда
		Стк.Вставить("idDev",СткХр.ИдентификаторУстройства);
		Стк.Вставить("name",пИмя);
		Стк.Вставить("idPodp",Неопределено);
	КонецЕСЛИ;
	
	
	 ОтправитьHTTPзапросPUSHID(Стк);
	 ОтправитьНастройкуПланшетаНаСервере();
	

КонецПроцедуры

&НаСервере
Процедура ОтправитьHTTPзапросPUSHID(Стк)
		
	СткСоединение = глОбщий.СткПолучитьСоединение();
	
	Соединение = Новый HTTPСоединение(
	СткСоединение.Сервер, // сервер (хост)
	СткСоединение.Порт, // порт, по умолчанию для http используется 80, для https 443
	СткСоединение.Логин, // пользователь для доступа к серверу (если он есть)
	СткСоединение.Пароль, // пароль для доступа к серверу (если он есть)
	, // здесь указывается прокси, если он есть
	, // таймаут в секундах, 0 или пусто - не устанавливать
	// защищенное соединение, если используется https
	);
	
	Запрос = Новый HTTPЗапрос("/Urals_BUH/hs/invAPI/IDPUSH?idDev");
	
	Хранилище = Новый ХранилищеЗначения(Стк, Новый СжатиеДанных(3));
	Запрос.УстановитьТелоИзСтроки(XMLСтрока(Хранилище));
	
	
	Результат = Соединение.ОтправитьДляОбработки(Запрос);
	Если Результат.КодСостояния <> 200 Тогда 
		Сообщить(результат.ПолучитьТелоКакСтроку());
	Иначе
		глОбщий.ЗаписатьРегСинхро("PUSHВФоне",ТекущаяДата());
	КонецЕСЛИ;
	
Конецпроцедуры

&НаСервере
Процедура ЗагрузитьЖурнал(Вид)  Экспорт
	ТекСклад = глДоступ.ПолучитьОсновнойСклад();
	
			 текОрг = ТекСклад.Организация;
			 Если ЗначениеЗаполнено(ТекОрг)=Ложь Тогда
				 Сообщить("Ошибка определения организации по складу! "+ТекСклад);
				 Возврат;
			 КонецеСЛИ;
			 
			 СткСоединение = глОбщий.СткПолучитьСоединение(текОрг);
			 стрАПИ = "/"+текОрг.APIrest+"/hs/invAPI/GETJUR";
	
	
			 Соединение = Новый HTTPСоединение(
			 СткСоединение.Сервер, // сервер (хост)
			 СткСоединение.Порт, // порт, по умолчанию для http используется 80, для https 443
			 СткСоединение.Логин, // пользователь для доступа к серверу (если он есть)
			 СткСоединение.Пароль, // пароль для доступа к серверу (если он есть)
			 , // здесь указывается прокси, если он есть
			 , // таймаут в секундах, 0 или пусто - не устанавливать
			 // защищенное соединение, если используется https
			 );
			 
			 
			 Запрос = Новый HTTPЗапрос(стрАПИ);
			 
			Стк = новый Структура("СклИд,Дн,Вид",ТекСклад.УникальныйИдентификатор(),7,xmlСтрока(Вид));
			 
			 стрХр = XMLСтрока(Новый ХранилищеЗначения(Стк,Новый СжатиеДанных(5)));
			 Запрос.УстановитьТелоИзСтроки(стрХр);
			 
			 Результат = Соединение.POST(Запрос);
			 Если Результат.КодСостояния <> 200 Тогда 
				 Сообщить("Ошибка синхронизации: код "+Результат.КодСостояния);
				 Сообщить(результат.ПолучитьТелоКакСтроку());
				 Возврат;
			 КонецЕСЛИ;
			 
			 Тбл = XMLзначение(ТИп("ХранилищеЗначения"),Результат.ПолучитьТелоКакСтроку()).Получить()[1];
			 Для каждого Стр из Тбл Цикл
				 
				сс = Документы.НакладнаяРасходная.ПолучитьСсылку(Новый УникальныйИдентификатор(Стр.СсылкаGUID));
				пНом = СтрЗаменить(Стр.Номер,"_","");
				Если Найти(СокрЛП(сс),"не найден")<>0 ТОгда
					Обк = Документы.НакладнаяРасходная.СоздатьДокумент();
					Обк.УстановитьСсылкуНового(сс);
					Обк.Склад = ТекСклад;
					Обк.ВидДокумента = Вид;
				ИНАчеЕсли  сс.Номер = "_"+пНом 
					и  сс.Дата = Стр.Дата 
					и  сс.КонтрагентСтр = Стр.КонтрагентСтр
					и  сс.ДатаСинхронизации <> Дата(1,1,1) Тогда
					Продолжить;
				ИНаче
					Обк = сс.ПолучитьОбъект();
				КонецЕСЛИ;
				
				Обк.Номер = "_"+пНом;
				Обк.Дата = Стр.Дата;
				Обк.КонтрагентСтр = Стр.КонтрагентСтр;
				ОБк.ДатаСинхронизации = ТекущаяДата();
				Обк.Проведен = Истина;
				Обк.Записать();
				 
			 КонецЦикла;
			 
			 
			 
			 
		
КонецПроцедуры

&НаСервере
Процедура ОтправитьНастройкуПланшетаНаСервере(ЭтоПовтор=Ложь) Экспорт
	
	
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиСистемы.ИмяНастройки КАК ИмяНастройки,
	               |	НастройкиСистемы.Зн КАК Зн
	               |ИЗ
	               |	РегистрСведений.НастройкиСистемы КАК НастройкиСистемы";
	Выб = Запрос.Выполнить().Выбрать();
	Соо = Новый Соответствие();
	Пока Выб.Следующий() Цикл
		Если ВЫб.ИмяНастройки ="СтруктураДанныхКлиента" Тогда ПРодолжить; КонецЕсли;
		XMLТип = XMLТипЗнч(выб.зн).ИмяТипа;
		Если Найти(XMLТип,"CatalogRef.")<>0 Тогда
			Соо.Вставить(СокрЛП(Выб.ИмяНастройки),Новый Структура("Вид,Ид",Сред(XMLТип,12),Выб.Зн.УникальныйИдентификатор()));		
		Иначе
			Соо.Вставить(СокрЛП(Выб.ИмяНастройки),ВЫб.Зн);		
		КонецЕСЛИ;
	КонецЦикла;              
	
	Соо.Вставить("ИмяКомпьютера",ИмяКомпьютера());
	Соо.Вставить("ЭтоПовтор",ЭтоПовтор);
	Соо.Вставить("ИдУстройства",Константы.ИдУстройства.Получить());
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Склады.Организация КАК Организация,
	               |	Склады.Код КАК Код,
	               |	Склады.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.Склады КАК Склады";
	//Соо.Вставить("Склады",Запрос.Выполнить().Выгрузить());
	
	
	Стк = глДоступ.ПолучитьСтруктураДанныхКлиента();
	Если ТипЗнч(Стк) = Тип("Структура") Тогда
		Для каждого Эл из Стк Цикл
			Соо.Вставить(Эл.Ключ,Эл.Значение);
		КонецЦикла;
	ИНаче
		Соо.Вставить("ТипЗнч(Стк)",ТипЗнч(Стк));
	КонецЕСЛИ;
	
	//Отправка
	
	СткСоединение = глОбщий.СткПолучитьСоединениеAZURE();
	
	Соединение = Новый HTTPСоединение(
	СткСоединение.Сервер, // сервер (хост)
	СткСоединение.Порт, // порт, по умолчанию для http используется 80, для https 443
	, // пользователь для доступа к серверу (если он есть)
	, // пароль для доступа к серверу (если он есть)
	, // здесь указывается прокси, если он есть
	, // таймаут в секундах, 0 или пусто - не устанавливать
	// защищенное соединение, если используется https
	);
	
	Запрос = Новый HTTPЗапрос("/ServiceMP/hs/ksAPI/IDDEV");
	
	Хранилище = Новый ХранилищеЗначения(Соо, Новый СжатиеДанных(5));
	Запрос.УстановитьТелоИзСтроки(XMLСтрока(Хранилище));
	
	Попытка
		Результат = Соединение.ОтправитьДляОбработки(Запрос);
	Исключение
		Сообщить(ОписаниеОшибки());
		Соединение = Неопределено;
		Возврат;
	КонецПопытки;
	Соединение = Неопределено;

	Если Результат.КодСостояния = 201 Тогда 
		Если ЗагрузитьНастройкиВРегистр(результат.ПолучитьТелоКакСтроку()) ТОгда
			ОтправитьНастройкуПланшетаНаСервере(Истина);
		КонецЕСлИ;
	ИначеЕсли Результат.КодСостояния <> 200 Тогда 
		Сообщить(результат.ПолучитьТелоКакСтроку());
	Иначе
		//глОбщий.ЗаписатьРегСинхро("PUSHВФоне",ТекущаяДата());
	КонецЕСЛИ;
	
	
	
	// Вставить содержимое обработчика.
КонецПроцедуры

Функция ЗагрузитьНастройкиВРегистр(Тело)
	
	Соо = XMLзначение(Тип("ХранилищеЗначения"),Тело).Получить();
	Если ТипЗнч(Соо)<>Тип("Соответствие") Тогда
		Сообщить("Неверные данные в теле запроса "+ТипЗнч(Соо)+" 
		| Нужно Соответсвие");
	КонецЕСЛИ;
	
	
	ЕстьОрг = Ложь;
	Для каждого эл из Соо Цикл
		Если ТипЗнч(Эл.Значение)=Тип("Структура") Тогда
			ТекЗн = Справочники[Эл.Значение.Вид].ПолучитьСсылку(Эл.Значение.Ид);
		ИНаче
			ТекЗн = Эл.Значение;
		Конецесли;
		глДоступ.УстановитьНастройку(Эл.Ключ,текЗн);
		Если Эл.Ключ = "Организация" Тогда
			ЕстьОрг = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОрг ТОгда
		глВыгрузкаДанных.ЗагрузитьНоменклатуруАлга("ALLORG");
	КонецЕСЛИ;
	
	Возврат Истина;
	
	
КонецФункции

&НаСервере
Процедура ЗагрузитьОстаткиЗаказНаряды() Экспорт
	
		СткСоединение = глОбщий.СткПолучитьСоединениеAZURE();
		
		Соединение = Новый HTTPСоединение(
        СткСоединение.Сервер, // сервер (хост)
        СткСоединение.Порт, // порт, по умолчанию для http используется 80, для https 443
        СткСоединение.Логин, // пользователь для доступа к серверу (если он есть)
        СткСоединение.Пароль, // пароль для доступа к серверу (если он есть)
        , // здесь указывается прокси, если он есть
        , // таймаут в секундах, 0 или пусто - не устанавливать
          // защищенное соединение, если используется https
    );
	
	Стк = глОбщий.ОбновитьДтСинхроНасервере();
	
	ТекстЗапроса = "/workOrder/hs/invAPI/GETOST";
	
	Запрос = Новый HTTPЗапрос(ТекстЗапроса);
 
 
    Результат = Соединение.Получить(Запрос);
	
	Если Результат.КодСостояния <> 200 Тогда 
		Сообщить("Ошибка синхронизации: код "+Результат.КодСостояния);
		Сообщить(результат.ПолучитьТелоКакСтроку());
		Возврат ;
	КонецЕСЛИ;
	
	тблРез = XMLзначение(Тип("ХранилищеЗначения"),Результат.ПолучитьТелоКакСтроку()).Получить(); 
	Наб = РегистрыСведений.ОстаткиОборудования.СоздатьНаборЗаписей();
	Наб.Загрузить(тблРез);
	Наб.Записать();
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьРо_Отгрузку(сс) Экспорт
	
		СткСоединение = глОбщий.СткПолучитьСоединениеAZURE();
		
		Соединение = Новый HTTPСоединение(
        СткСоединение.Сервер, // сервер (хост)
        СткСоединение.Порт, // порт, по умолчанию для http используется 80, для https 443
        СткСоединение.Логин, // пользователь для доступа к серверу (если он есть)
        СткСоединение.Пароль, // пароль для доступа к серверу (если он есть)
        , // здесь указывается прокси, если он есть
        , // таймаут в секундах, 0 или пусто - не устанавливать
          // защищенное соединение, если используется https
    );
	
	
	Стк = Новый Структура;
	Стк.Вставить("ГУИД",сс.УникальныйИдентификатор());
	Стк.Вставить("Дата",сс.Дата);
	Стк.Вставить("Контрагент",сс.Контрагент);
	Стк.Вставить("МасЗН",сс.ЗаказНаряды.ВыгрузитьКолонку("ЗаказНарядИд"));

	
	хр = XMLСтрока(Новый ХранилищеЗначения(Стк,Новый СжатиеДанных(5)));
	
	ТекстЗапроса = "/workOrder/hs/invAPI/";
	Если сс.виддокумента = Перечисления.ВидДокумента.ро_Отгрузка Тогда
		ТекстЗапроса = ТекстЗапроса +"PUSHOTG";
	Иначе
		ТекстЗапроса = ТекстЗапроса +"PUSHSOSRAB";
	КонецеслИ;
	
	Запрос = Новый HTTPЗапрос(ТекстЗапроса);
	запрос.УстановитьТелоИзСтроки(хр);
 
 
    Результат = Соединение.POST(Запрос);
	
	Если Результат.КодСостояния <> 200 Тогда 
		Сообщить("Ошибка синхронизации: код "+Результат.КодСостояния);
		Сообщить(результат.ПолучитьТелоКакСтроку());
		Возврат ложь;
	КонецЕСЛИ;
	
	Возврат Истина;
	
КонецФункции


&НаСервере
Процедура ЗагрузитьСпрЗаказНаряды(ЗагрузитьВсе=Ложь) Экспорт
	
		СткСоединение = глОбщий.СткПолучитьСоединениеAZURE();
		
		Соединение = Новый HTTPСоединение(
        СткСоединение.Сервер, // сервер (хост)
        СткСоединение.Порт, // порт, по умолчанию для http используется 80, для https 443
        СткСоединение.Логин, // пользователь для доступа к серверу (если он есть)
        СткСоединение.Пароль, // пароль для доступа к серверу (если он есть)
        , // здесь указывается прокси, если он есть
        , // таймаут в секундах, 0 или пусто - не устанавливать
          // защищенное соединение, если используется https
    );
	
	дтИзм = Неопределено;
	Стк = глОбщий.ОбновитьДтСинхроНасервере();
	Если Стк.Свойство("Дефектовка") и ЗагрузитьВсе=Ложь Тогда
		ДтИзм = Стк.Дефектовка;
	КонецЕСЛИ;
	
	ТекстЗапроса = "/workOrder/hs/invAPI/GETSPR?ksPar=1";
	Если  ДтИзм<>Неопределено Тогда
		 ТекстЗапроса = ТекстЗапроса + "&izmDt="+Формат(ДтИзм-600,"ДФ=yyyyMMddHHmmss");
	 КонецЕСЛИ;
	
	//Запрос = Новый HTTPЗапрос("/buh/hs/invAPI/refskl");
	
	Запрос = Новый HTTPЗапрос(ТекстЗапроса);
 
 
    Результат = Соединение.Получить(Запрос);
	
	Если Результат.КодСостояния <> 200 Тогда 
		Сообщить("Ошибка синхронизации: код "+Результат.КодСостояния);
		Сообщить(результат.ПолучитьТелоКакСтроку());
		Возврат ;
	КонецЕСЛИ;
	
	СткРез = XMLзначение(Тип("ХранилищеЗначения"),Результат.ПолучитьТелоКакСтроку()).Получить(); 
	
	ЕстьОшибки = Ложь;
	Если ПрочитатьОтветОбк(СткРез.Прочие,,,Истина) <> Истина Тогда
		Сообщить("Ошибка загрузки! Дефектовка прочие");
		ЕстьОшибки = Истина
	КонецЕСЛИ;
	
	Если ЗагрузитьДефектовку(СткРез.Дефектовка) <> Истина Тогда
		Сообщить("Ошибка загрузки! Дефектовка");
		ЕстьОшибки = Истина
	КонецЕСЛИ;
	 
	Если ЕстьОшибки=Ложь Тогда
		глОбщий.ЗаписатьРегСинхро("Дефектовка",СткРез.ТекДт);
	КонецЕСЛИ;
	
	
КонецПроцедуры

Функция ЗагрузитьДефектовку(Тбл)
	
	Т = Тбл.Скопировать(,"GUID"); 
	Т.свернуть("GUID","");
	
	Тбл.Колонки.Добавить("Детали");
	Для каждого Стр из Тбл Цикл
		Стр.Детали = Справочники.ДеталиОборудования.ПолучитьСсылку(Новый УникальныйИдентификатор(Стр.ДеталиGUID));
	КонецЦикла;
	
	Для каждого С из Т Цикл
		
		сс = Справочники.ро_Оборудование.ПолучитьСсылку(Новый УникальныйИдентификатор(С.GUID));
		Обк = сс.ПолучитьОбъект();
		Обк.Дефектовка.Загрузить(Тбл.Скопировать(Новый Структура("GUID",С.GUID)));
		Обк.Записать();
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции
	      