&НаСервере
Процедура СоздатьНомменклатуруНаСервере()
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Обк = Номенклатура.ПолучитьОбъект();	
	ИНаче
		Обк = Справочники.Номенклатура.СоздатьЭлемент();
	КонецеслИ;
	Обк.Наименование = Наименование;
	Обк.ЕдИзм = ЕдИзм;
	Обк.Родитель = ГруппаНоменклатуры;
	Обк.Записать();
	Номенклатура = Обк.ссылка;
	
	
КонецПроцедуры


&НаКлиенте
Процедура СоздатьНоменклатуру(Команда)
	Если глДоступ.ДоступЗапросыНаНовуюНоменклатуру()=Ложь Тогда
		Сообщить("Нет доступа!");
		Возврат;
	КонецЕСЛИ;
	
	Если ЗначениеЗаполнено(ГруппаНоменклатуры)=Ложь Тогда
		Сообщить("Не выбрана группа!");
		Возврат;
	КонецЕСЛИ;
	
	Если СокрЛП(ЕдИзм)="" Тогда
		Сообщить("Не выбрана ед.измерения!");
		Возврат;
	КонецЕСЛИ;
	
	СоздатьНомменклатуруНаСервере();
	ДатаЗакрытияЗапроса = ТекущаяДата();
	
	Если ЗаписатьОнЛайнНаСервере(Истина)=Истина Тогда
		ЭтаФорма.Закрыть();
	КонецеСЛИ;
	
КонецПроцедуры

&НаКлиенте
Процедура Отказать(Команда)
	Если глДоступ.ДоступЗапросыНаНовуюНоменклатуру()=Ложь Тогда
		Сообщить("Нет доступа!");
		Возврат;
	КонецЕСЛИ;
	
	Если Команда.Имя = "ОтказатьУжеЕсть" Тогда
		 ПричинаОтказа = "В справочнике уже есть такая позиция.";
	КонецеСЛИ;
	
	нс= Элементы.тблНом.ТекущаяСтрока;
	Если нс<>Неопределено Тогда
		 ПричинаОтказа = "Есть такая позиция";
		 Номенклатура = тблНом[нс].Номенклатура;
		 НоменклатураПриИзменении();
	ИНачеЕсли СокрЛП(ПричинаОтказа)="" Тогда
		Сообщить("Не указана причина отказа!");
		Возврат;
	КонецЕСЛИ;
	
	ДатаЗакрытияЗапроса = ТекущаяДата();
	
	Если ЗаписатьОнЛайнНаСервере(Ложь)=Истина Тогда
		ЭтаФорма.Закрыть();
	КонецеСЛИ;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьЗначенияСвойств(ЭтаФорма,Параметры,,"ЗакрыватьПриВыборе,ЗакрыватьПриЗакрытииВладельца,КлючНазначенияИспользования,ТолькоПросмотр");
КонецПроцедуры


&НаСервере
Функция ЗаписатьОнЛайнНаСервере(НадоВыгрузитьНоменклатуру)
	
	СткСоединение = глОбщий.СткПолучитьСоединение();
	
	Соединение = Новый HTTPСоединение(
	СткСоединение.Сервер, // сервер (хост)
	СткСоединение.Порт, // порт, по умолчанию для http используется 80, для https 443
	СткСоединение.Логин, // пользователь для доступа к серверу (если он есть)
	СткСоединение.Пароль, // пароль для доступа к серверу (если он есть)
	, // здесь указывается прокси, если он есть
	, // таймаут в секундах, 0 или пусто - не устанавливать
	// защищенное соединение, если используется https
	);
	
	// Вставить содержимое обработчика.
	
	Если НадоВыгрузитьНоменклатуру=Истина Тогда
		Если  глВыгрузкаДанных.ВыгрузитьОбк(Новый Структура("ВидСпр","Номенклатура"),Соединение,Номенклатура.ПолучитьОбъект(),1) Тогда
			//Обк.ОбменДанными.Загрузка = истина;
			//Обк.Записать();
		ИНаче
			Возврат Ложь;
		КонецЕСЛИ;
	КонецесЛИ;
	
	//Отправить заявку
	Запрос = Новый HTTPЗапрос("/Urals_BUH/hs/invAPI/NEWNOM");
	
	Стк = Новый Структура;
	Стк.Вставить("dtZkr",ДатаЗакрытияЗапроса);
	Стк.Вставить("prOtkaz",СокрЛП(ПричинаОтказа));
	Стк.Вставить("name",СокрЛП(Наименование));
	Стк.Вставить("id1s",СокрЛП(идЗапроса));
	Стк.Вставить("idnom",СокрЛП(Номенклатура.УникальныйИдентификатор()));
	
	хр = новый ХранилищеЗначения(Стк);
	Запрос.УстановитьТелоИзСтроки(XMLСтрока(хр));	
	
	//Результат = Соединение.ОтправитьДляОбработки(Запрос);
	Результат = Соединение.POST(Запрос);
	
	Если Результат.КодСостояния <> 200 Тогда 
		Сообщить("Ошибка синхронизации: код "+Результат.КодСостояния);
		Сообщить(результат.ПолучитьТелоКакСтроку());
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕСЛИ;
	
	
		
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если глДоступ.ДоступЗапросыНаНовуюНоменклатуру()=Ложь Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
	КонецЕСЛИ;
	НоменклатураПриИзменении();

	Мас = ДанныеЕдИзм();
	Если СокрЛП(ЕдИзм)<>"" Тогда
		Если Мас.Найти(СокрЛП(ЕдИзм))=Неопределено Тогда
			Мас.добавить(СокрЛП(ЕдИзм));
		КонецеслИ;
	КонецЕСЛИ;
	Элементы.ЕдИзм.СписокВыбора.ЗагрузитьЗначения(Мас);
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеЕдИзм()
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ DISTINCT
	               |	Номенклатура.ЕдИзм КАК ЕдИзм
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура";
	ТБл =Запрос.Выполнить().Выгрузить();
	Возврат Тбл.ВыгрузитьКолонку("ЕдИзм");
	
	
КонецФункции

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент=Неопределено)
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Элементы.СоздатьНоменклатуру.Заголовок = "Изменить номенклатуру";
	КонецЕСЛИ;
	ПриИзмененииНоменклатурыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииНоменклатурыНаСервере()
	ГруппаНоменклатуры = номенклатура.Родитель;
	Если СокрЛП(номенклатура.ЕдИзм)<>"" Тогда
		ЕдИзм = номенклатура.ЕдИзм;
	КонецЕслИ;
КонецПроцедуры

&НаКлиенте
Процедура Поиск(Команда)
	Мас = ПоискНаСервере(Наименование);
	тблНом.Очистить();
	Для каждого эл из Мас Цикл
		тблНом.Добавить().Номенклатура = Эл;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоискНаСервере(Наименование)
	
	Мас = новый Массив;
	
	ТекСтр = СтрЗаменить(Наименование," ",Символы.ПС);
	Для а=1 по СтрЧислоСтрок(ТекСтр) Цикл
		пСтр = СтрПолучитьСтроку(ТекСтр,а);
		Если    Найти(пСтр,"0")<>0 
			или Найти(пСтр,"1")<>0
			или Найти(пСтр,"2")<>0
			или Найти(пСтр,"3")<>0
			или Найти(пСтр,"4")<>0
			или Найти(пСтр,"5")<>0
			или Найти(пСтр,"6")<>0
			или Найти(пСтр,"7")<>0
			или Найти(пСтр,"8")<>0
			или Найти(пСтр,"9")<>0 Тогда
			
		ИНаче Продолжить; КонецЕСЛИ;
		
		Запрос = новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ top 20
		               |	Номенклатура.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.Номенклатура КАК Номенклатура
		               |ГДЕ
		               |	Номенклатура.Наименование ПОДОБНО &Наименование и этоГруппа=Ложь";
		Запрос.УстановитьПараметр("Наименование","%"+пстр+"%");
		Выб = Запрос.Выполнить().Выбрать(); 
		Пока Выб.Следующий() Цикл
			Если Мас.Найти(выб.ссылка)=Неопределено Тогда
			Мас.Добавить(выб.ссылка);
			КонецеСЛИ;
		Конеццикла;
		
	КонецЦикла;
	
	Возврат Мас;
	
КонецФункции




