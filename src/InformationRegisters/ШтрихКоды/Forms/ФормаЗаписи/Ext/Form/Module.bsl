&НаСервереБезКонтекста
Функция ЕстьТакойШтрихКод(ШК)
	
	Если ШК = "" ТОгда Возврат Ложь; КонецЕСЛИ; 
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ TOP 1
	               |	ШтрихКоды.ШтрихКод КАК ШтрихКод
	               |ИЗ
	               |	РегистрСведений.ШтрихКоды КАК ШтрихКоды
	               |ГДЕ
	               |	ШтрихКоды.ШтрихКод = &ШтрихКод";
	
	Запрос.УстановитьПараметр("ШтрихКод",ШК);
	Если Запрос.Выполнить().Пустой() ТОгда
		Возврат Ложь;
	ИНаче
		Возврат Истина;
	КонецЕСЛИ;
	
	
КонецФункции


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если    ЕстьТакойШтрихКод(сокрЛП(Запись.ШтрихКод)) 
		и ( Запись.ДатаИзменения = Дата(1,1,1) или Запись.ДатаСинхронизации<>Дата(1,1,1) ) Тогда
		
		ЭтаФорма.КоманднаяПанель.Видимость = ложь;
		Если глДоступ.ДоступНоменклатура()=Истина Тогда
			Элементы.ЗаписатьОнЛайн.Видимость = истина;
	    Иначе
			ЭтаФорма.ТолькоПросмотр = Истина;
		КонецеСЛИ;
	КонецЕСЛИ;

КонецПроцедуры

&НаКлиенте
Процедура ЗапросНаВоодНовойНоменклатуры(Команда)
	
	#Если МобильноеПриложениеКлиент Тогда
		
		//днМульт = СредстваМультимедиа.СделатьФотоснимок(ТипКамерыУстройства.Задняя,,70);
		днМульт = СредстваМультимедиа.СделатьВидеозапись(ТипКамерыУстройства.Задняя);
		Если днМульт = Неопределено Тогда Возврат; КонецЕСЛИ;
		//Сообщить(Бин.ТипСодержимого);
		
		//ВыгрузитьФотоНом(днМульт.ПолучитьДвоичныеДанные(),Запись.ШтрихКод);
		
	#КонецЕсли
	ЭтаФорма.Модифицированность=Ложь;
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФотоНом(Бин,ШК) Экспорт
	
	
	СткСоединение = глОбщий.СткПолучитьСоединение();
	
		Соединение = Новый HTTPСоединение(
        СткСоединение.Сервер, // сервер (хост)
        СткСоединение.Порт, // порт, по умолчанию для http используется 80, для https 443
        СткСоединение.Логин, // пользователь для доступа к серверу (если он есть)
        СткСоединение.Пароль, // пароль для доступа к серверу (если он есть)
        , // здесь указывается прокси, если он есть
        , // таймаут в секундах, 0 или пусто - не устанавливать
          // защищенное соединение, если используется https
    );
	
	
	
		Запрос = Новый HTTPЗапрос("/Urals_BUH/hs/invAPI/NEWNOM");
		
		//Сообщить(СтрДлина(Base64Строка(Бин)));
		Запрос.Заголовки.Вставить("id1s",Новый УникальныйИдентификатор());
		Запрос.Заголовки.Вставить("finish1s",0);
		Запрос.Заголовки.Вставить("barcode1s",ШК);
		
		ТекСтр = Base64Строка(Бин);
		Пока СтрДлина(ТекСтр)>0 Цикл
			
			п = Лев(ТекСтр,50000);
			ТекСтр = Сред(ТекСтр,50001);
			
			Запрос.УстановитьТелоИзСтроки(п); 
			
			Если СтрДлина(ТекСтр)=0 Тогда
				Запрос.Заголовки.Вставить("finish1s",1);
			КонецЕСЛИ;
			Результат = Соединение.ОтправитьДляОбработки(Запрос);
			
			Если Результат.КодСостояния <> 200 Тогда 
				Сообщить("Ошибка синхронизации: код "+Результат.КодСостояния);
				Сообщить(результат.ПолучитьТелоКакСтроку());
				Прервать;
			КонецЕСЛИ;
			
		КонецЦикла;
		
	
		
	
КонецПроцедуры


&НаСервере
Функция ЗаписатьОнЛайнНаСервере()
	
	СткСоединение = глОбщий.СткПолучитьСоединение();
	
	Соединение = Новый HTTPСоединение(
	СткСоединение.Сервер, // сервер (хост)
	СткСоединение.Порт, // порт, по умолчанию для http используется 80, для https 443
	СткСоединение.Логин, // пользователь для доступа к серверу (если он есть)
	СткСоединение.Пароль, // пароль для доступа к серверу (если он есть)
	, // здесь указывается прокси, если он есть
	, // таймаут в секундах, 0 или пусто - не устанавливать
	// защищенное соединение, если используется https
	);
	
	НадоПерезаписать = 0;
	Если глДоступ.ДоступНоменклатура()=Истина Тогда
		НадоПерезаписать = 1;
	КонецЕСЛИ;
	
	Стк = Новый Структура;
	Стк.Вставить("ВидСпр","ШтрихКоды");
	Стк.Вставить("ссылка",Запись.Номенклатура);
	Стк.Вставить("Зн1",Запись.ШтрихКод);
	Стк.Вставить("Зн2",Запись.Производитель);
	Стк.Вставить("ДатаИзменения",ТекущаяДата());
	
	Если  глВыгрузкаДанных.ВыгрузитьОбк(Стк,Соединение,Неопределено,1) Тогда
		Возврат ИстинА;
	ИНаче
		Возврат Ложь;
	КонецЕСЛИ;
	
		
КонецФункции

&НаКлиенте
Процедура ЗаписатьОнЛайн(Команда)
	Если глДоступ.ДоступНоменклатура()=Ложь Тогда
		Возврат;
	КонецЕСЛИ;
	
	Если ЗаписатьОнЛайнНаСервере() Тогда
		ЭтаФорма.Прочитать();
		ЭтаФорма.Модифицированность = Ложь;
	КонецЕСЛИ;
КонецПроцедуры
	 

//&НаКлиенте
//Процедура ВыгрузитьФотоНом1(Бин,ШК) Экспорт
//	
//	
//	СткСоединение = глОбщий.СткПолучитьСоединение();
//	
//		Соединение = Новый HTTPСоединение(
//        СткСоединение.Сервер, // сервер (хост)
//        СткСоединение.Порт, // порт, по умолчанию для http используется 80, для https 443
//        СткСоединение.Логин, // пользователь для доступа к серверу (если он есть)
//        СткСоединение.Пароль, // пароль для доступа к серверу (если он есть)
//        , // здесь указывается прокси, если он есть
//        , // таймаут в секундах, 0 или пусто - не устанавливать
//          // защищенное соединение, если используется https
//    );
//	
//	
//	//Подготовка переменных 
//	Boundary = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", ""); 
//	
//	//Определяем имя файла ответа от веб-сервера. 
//	ИмяФайлаОтвета = КаталогВременныхФайлов() + "answer.tmp"; 
//	
//	КодироватьФайл = Ложь; 
//    //Определяем массив для процедуры ОбъединитьФайлы 
//    МассивФайловДляОбъединения = Новый Массив; 

//    //Формируем начальный фрагмент файла POST-запроса 
//    ИмяФайлаОтправкиНачало = ПолучитьИмяВременногоФайла("txt"); 
//    ФайлОтправкиНачало = Новый ЗаписьТекста(ИмяФайлаОтправкиНачало, КодировкаТекста.ANSI, Символы.ПС, Ложь); 
//    //Определяем раздел двоичных данных 
//    ФайлОтправкиНачало.ЗаписатьСтроку("--" + Boundary); 
//    //Указываем имя файла для передачи 
//    //На сервере оно появится в массиве $_FILES['datafile']['name'] 
//    ФайлОтправкиНачало.ЗаписатьСтроку("Content-Disposition: form-data; name=""datafile""; filename=""" + ИмяФайлаДляЗагрузки + """"); 
//    //Указываем тип передаваемых данных. 
//    //С таким же успехом в Content-Type можно указать application/x-octet-stream или application/x-zip-compressed 
//    ФайлОтправкиНачало.ЗаписатьСтроку("Content-Type: application/x-octet-stream"); 
//    ФайлОтправкиНачало.ЗаписатьСтроку(""); 
//    ФайлОтправкиНачало.Закрыть(); 

//    МассивФайловДляОбъединения.Добавить(ИмяФайлаОтправкиНачало); 

//    //Копируем файл для загрузки во временный и добавляем в массив файлов для объединения 
//    ИмяФайлаДляЗагрузкиВременный = ПолучитьИмяВременногоФайла("tmp"); 
//    КопироватьФайл(ИмяФайлаДляЗагрузки, ИмяФайлаДляЗагрузкиВременный); 
//    МассивФайловДляОбъединения.Добавить(ИмяФайлаДляЗагрузкиВременный); 

//    //Формируем конечный фрагмент файла POST-запроса 
//    ИмяФайлаОтправкиКонец = ПолучитьИмяВременногоФайла("txt"); 
//    ФайлОтправкиКонец = Новый ЗаписьТекста(ИмяФайлаОтправкиКонец, КодировкаТекста.ANSI, Символы.ПС, Ложь); 

//    //Завершение раздела двоичных данных 
//    ФайлОтправкиКонец.ЗаписатьСтроку("--" + Boundary); 

//    //Определяем раздел для каких либо других POST-данных, например содержимого полей виртуальной HTML-формы. 

//    //Соответствует полю HTML-формы input type="submit" name="submit" value="Submit" / 
//    ФайлОтправкиКонец.ЗаписатьСтроку("--" + Boundary); 
//    ФайлОтправкиКонец.ЗаписатьСтроку("Content-disposition: form-data; name=""submit""" + Символы.ПС); 
//    ФайлОтправкиКонец.ЗаписатьСтроку("1"); 
//    ФайлОтправкиКонец.ЗаписатьСтроку("--" + Boundary); 

//    //Соответствует полю HTML-формы input type="checkbox" name="decode" value="decode" / 
//    ФайлОтправкиКонец.ЗаписатьСтроку("--" + Boundary); 
//    ФайлОтправкиКонец.ЗаписатьСтроку("Content-disposition: form-data; name=""decode""" + Символы.ПС); 
//    ФайлОтправкиКонец.ЗаписатьСтроку(?(КодироватьФайл, "1", "0")); 
//    ФайлОтправкиКонец.ЗаписатьСтроку("--" + Boundary); 

//    //Соответствует полю HTML-формы input type="text" name="some_field" value="Some text" / 
//    ФайлОтправкиКонец.ЗаписатьСтроку("--" + Boundary); 
//    ФайлОтправкиКонец.ЗаписатьСтроку("Content-disposition: form-data; name=""message""" + Символы.ПС); 
//    ФайлОтправкиКонец.ЗаписатьСтроку("Передача файла из базы данных 1С Предприятия"); 
//    //Завершение сообщения для сервера 
//    ФайлОтправкиКонец.ЗаписатьСтроку("--" + Boundary + "--"); 
//    ФайлОтправкиКонец.Закрыть(); 

//    МассивФайловДляОбъединения.Добавить(ИмяФайлаОтправкиКонец); 

//    //Теперь сформированные фрагменты сообщения для сервера объединяем в один файл POST-запроса 
//    ОбъединитьФайлы(МассивФайловДляОбъединения, ИмяФайлаОтправки); 

//		
//		
//	
//КонецПроцедуры
//	 

